// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   RubyLexer.java

package jsyntaxpane.lexers;

import java.io.*;
import jsyntaxpane.Token;
import jsyntaxpane.TokenType;

// Referenced classes of package jsyntaxpane.lexers:
//            DefaultJFlexLexer

public final class RubyLexer extends DefaultJFlexLexer
{

    private static int[] zzUnpackAction()
    {
        int result[] = new int[187];
        int offset = 0;
        offset = zzUnpackAction("\003\000\003\001\001\002\001\003\001\001\002\004\001\005\001\003\001\005\021\003\001\006\001\007\001\b\001\t\001\n\001\013\005\005\001\001\001\f\001\r\002\016\001\001\001\017\002\020\001\001\002\002\001\021\001\000\003\004\001\000\004\004\001\000\020\003\001\022\001\023\n\003\001\000\001\024\002\r\003\000\004\004\001\000\001\003\001\025\020\003\001\023\006\003\001\026\001\r\001\027\002\000\002\004\r\003\001\000\002\004\001\003\001\000\002\004\001\000\002\004\001\030\006\004\001\000\001\004\001\000\001\004\001\000\001\004\001\000\001\004\001\000\001\004\001\000\001\004\001\000\001\004\001\000\005\004", offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while(--count > 0);
        }

        return j;
    }

    private static int[] zzUnpackRowMap()
    {
        int result[] = new int[187];
        int offset = 0;
        offset = zzUnpackRowMap("\000\000\000@\000\200\000\300\000\u0100\000\u0140\000\u0180\000\u01C0\000\u0200\000\u0240\000\u0280\000\u02C0\000\u0300\000\u0340\000\u0380\000\u03C0\000\u0400\000\u0440\000\u0480\000\u04C0\000\u0500\000\u0540\000\u0580\000\u05C0\000\u0600\000\u0640\000\u0680\000\u06C0\000\u0700\000\u0740\000\u0780\000\300\000\300\000\300\000\300\000\300\000\300\000\u07C0\000\u0800\000\u0840\000\u0880\000\300\000\u0340\000\u08C0\000\u0900\000\u0940\000\300\000\u0980\000\300\000\u09C0\000\300\000\u0A00\000\u0A40\000\300\000\300\000\u0A80\000\u0AC0\000\u0B00\000\300\000\u0B40\000\u0B80\000\u0BC0\000\u0C00\000\u0C40\000\u0C80\000\u0CC0\000\u0D00\000\u0D40\000\u0D80\000\u0DC0\000\u0E00\000\u0E40\000\u0E80\000\u0EC0\000\u0F00\000\u0F40\000\u0F80\000\u0FC0\000\u1000\000\u1040\000\u1080\000\u01C0\000\u01C0\000\u10C0\000\u1100\000\u1140\000\u1180\000\u11C0\000\u1200\000\u1240\000\u1280\000\u12C0\000\u1300\000\u1340\000\300\000\u1380\000\u13C0\000\u1400\000\u1440\000\u1480\000\u14C0\000\u1500\000\u1540\000\u1580\000\u15C0\000\u1600\000\u01C0\000\u1640\000\u1680\000\u16C0\000\u1700\000\u1740\000\u1780\000\u17C0\000\u1800\000\u1840\000\u1880\000\u18C0\000\u1900\000\u1940\000\u1980\000\u19C0\000\u1A00\000\u1A40\000\u1A80\000\u1AC0\000\u1B00\000\u1B40\000\u1B80\000\u1BC0\000\300\000\300\000\300\000\u1C00\000\u1C40\000\u1C80\000\u1CC0\000\u1D00\000\u1D40\000\u1D80\000\u1DC0\000\u1E00\000\u1E40\000\u1E80\000\u1EC0\000\u1F00\000\u1F40\000\u1F80\000\u1FC0\000\u2000\000\u2040\000\u2080\000\u20C0\000\u2100\000\u2140\000\u2180\000\u21C0\000\u2200\000\u2240\000\u2280\000\300\000\u22C0\000\u2300\000\u2340\000\u2380\000\u23C0\000\u2400\000\u2440\000\u2480\000\u24C0\000\u2500\000\u2540\000\u2580\000\u25C0\000\u2600\000\u2640\000\u2680\000\u26C0\000\u2700\000\u2740\000\u2780\000\u27C0\000\u2800\000\u2840\000\u2880\000\u28C0\000\u2900", offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }

        return j;
    }

    private static int[] zzUnpackTrans()
    {
        int result[] = new int[10560];
        int offset = 0;
        offset = zzUnpackTrans("\001\004\001\005\001\004\001\006\001\007\001\b\001\t\001\n\001\013\003\b\003\013\001\b\001\f\001\r\001\016\001\004\001\017\001\020\003\b\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\b\001\030\001\031\002\b\001\032\001\b\001\033\001\034\001\035\001\036\001\b\001\037\002\b\001 \001!\001\"\001#\001$\001%\001&\001'\001\016\001(\001)\001*\001\016\001+\001,\001\b\001\004\001-\001.\001/\020-\0010)-\0011\003-\0012\0013\020-\0010)-\0014\002-B\000\001\004@\000\001\006<\000\001\007\0015\0016=\007\005\000\013\b\001\000\001\b\002\000\033\b\017\000\001\b\0017\006\000\0018@\000\0019\001:\001;\001<\001\000\001=\001>\001=\001?\001@\001A\003\000\001A\n\000\001;\001?\013\000\001<\031\000\002\013\001;\002\000\003\013\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002@\003\000\003@\001\000\001*4\000\013\b\001\000\001\b\002\000\005\b\001B\006\b\001C\016\b\017\000\001\b\0017;\000\001*\t\000\013\b\001\000\001\b\002\000\001\b\001D\031\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\004\b\001E\026\b\017\000\001\b\0017\005\000\013\b\001\000\001F\002\000\013\b\001G\005\b\001H\t\b\017\000\001\b\0017\005\000\013\b\001\000\001I\002\000\007\b\001J\023\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\005\b\001K\025\b\017\000\001\b\0017\005\000\013\b\001\000\001L\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\005\b\001M\001N\005\b\001O\016\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\b\b\001P\006\b\001Q\013\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\005\b\001R\007\b\001S\r\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\t\b\001T\007\b\001U\t\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\017\b\001V\013\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\b\b\001R\022\b\017\000\001\b\0017\005\000\013\b\001\000\001W\002\000\021\b\001S\t\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\013\b\001X\017\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\t\b\001Y\002\b\001Z\016\b\017\000\001\b\0017\005\000\013\b\001\000\001[\002\000\b\b\001\\\022\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\021\b\001]\t\b\017\000\001\b\00175\000\001\016\005\000\001*:\000\001\016\004\000\001*<\000\001\016\001*\001\000\001*=\000\001\016\001\000\001*A\000\001^\002\000\001-\002\000\020-\001\000)-\001\000\002-\002\000\001/=\000\002_\001\000\004_\001`\004_\002`\001a1_\002\000\0013z\000\001b\004\000\0016F\000\001c\005\000\001d7\000\0019\001:\001;\002\000\001=\001>\001=\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002:\003\000\003:\001?\001@\001A\003\000\001A\013\000\001?%\000\001e\001f\002\000\005f\001\000\001f\002\000\002f\007\000\001f\003\000\001f\002\000\001f\002\000\001f\001\000\002f\034\000\001g\001:\001;\002\000\003g\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\001=\001:\001;\002\000\003=\001?\001@\001A\003\000\001A\n\000\001;\001?\\\000\001;\b\000\002@\003\000\003@\001?\001\000\001A\003\000\001A\013\000\001?%\000\002h\003\000\003h\003\000\001i2\000\013\b\001\000\001\b\002\000\006\b\001j\f\b\001k\007\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001l\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\002\b\001m\030\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\020\b\001R\n\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\031\b\001H\001\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\f\b\001R\016\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\n\b\001R\020\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\f\b\001n\016\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\022\b\001o\b\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\n\b\001p\001\b\001q\006\b\001r\007\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001s\003\b\001t\b\b\001u\007\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\023\b\001R\007\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001v\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\013\b\001w\017\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\007\b\001x\023\b\017\000\001\b\0017\005\000\013\b\001\000\001y\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\f\b\001z\016\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\b\b\001S\022\b\017\000\001\b\0017\005\000\013\b\001\000\001y\002\000\013\b\001{\017\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\r\b\001|\r\b\017\000\001\b\0017\005\000\013\b\001\000\001}\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001~\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\t\b\001\177\021\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\032\b\001\200\017\000\001\b\0017\005\000\013\b\001\000\001\201\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\023\b\001\202\007\b\017\000\001\b\0017=\000\001\203\t\000\001a\004\000\003a8\000\001\204\004\000\003\204n\000\001\205\031\000\001\206?\000\001\207/\000\001e\001f\001;\001\000\005f\001\000\001f\002\000\002f\007\000\001f\002\000\001;\001f\002\000\001f\002\000\001f\001\000\002f\034\000\002\210\001;\001\000\005\210\001\000\001\210\002\000\002\210\007\000\001\210\002\000\001;\001\210\002\000\001\210\002\000\001\210\001\000\002\210\034\000\001\211\001:\001;\002\000\003\211\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002h\003\000\003h\001?\021\000\001?%\000\002h\003\000\003h6\000\013\b\001\000\001\b\002\000\007\b\001\212\023\b\017\000\001\b\0017\005\000\013\b\001\000\001R\002\000\013\b\001n\017\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\003\b\001\213\027\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\r\b\001R\r\b\017\000\001\b\0017\005\000\013\b\001\000\001\032\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\013\b\001\214\017\b\017\000\001\b\0017\005\000\013\b\001\000\001\215\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001n\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\025\b\001P\005\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\007\b\001\216\001\217\022\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\021\b\001R\t\b\017\000\001\b\0017\005\000\013\b\001\000\001\220\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\t\b\001\221\021\b\017\000\001\b\0017\005\000\013\b\001\000\001R\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\005\b\001R\025\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001x\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\f\b\001~\016\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\013\b\001\222\017\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\f\b\001M\016\b\017\000\001\b\0017\005\000\013\b\001\000\001S\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001\223\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\013\b\001\224\017\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\t\b\001\225\021\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\007\b\001\226\023\b\017\000\001\b\0017\030\000\001\2270\000\001\227=\000\002\230\001;\001\000\005\230\001\000\001\230\002\000\002\230\007\000\001\230\002\000\001;\001\230\002\000\001\230\002\000\001\230\001\000\002\230\034\000\001\231\001:\001;\002\000\003\231\001?\001@\001A\003\000\001A\n\000\001;\001?#\000\013\b\001\000\001\b\002\000\b\b\001x\022\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\004\b\001R\026\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\f\b\001S\016\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001\221\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\b\b\001y\022\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\024\b\001R\006\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\b\b\001H\022\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001R\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\005\b\001\232\025\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001S\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\005\b\001S\025\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\027\b\001R\003\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\f\b\001x\016\b\017\000\001\b\0017\025\000\001\2331\000\002\234\001;\001\000\005\234\001\000\001\234\002\000\002\234\007\000\001\234\002\000\001;\001\234\002\000\001\234\002\000\001\234\001\000\002\234\034\000\001\235\001:\001;\002\000\003\235\001?\001@\001A\003\000\001A\n\000\001;\001?#\000\013\b\001\000\001M\002\000\033\b\017\000\001\b\0017\006\000\001\236@\000\002\237\001;\001\000\005\237\001\000\001\237\002\000\002\237\007\000\001\237\002\000\001;\001\237\002\000\001\237\002\000\001\237\001\000\002\237\034\000\001\240\001:\001;\002\000\003\240\001?\001@\001A\003\000\001A\n\000\001;\001?$\000\001\241@\000\002\242\001;\001\000\005\242\001\000\001\242\002\000\002\242\007\000\001\242\002\000\001;\001\242\002\000\001\242\002\000\001\242\001\000\002\242\034\000\001\243\001:\001;\002\000\003\243\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\244\001;\001\000\005\244\001\000\001\244\002\000\002\244\007\000\001\244\002\000\001;\001\244\002\000\001\244\002\000\001\244\001\000\002\244\034\000\001\245\001:\001;\002\000\003\245\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\246\001;\001\000\005\246\001\000\001\246\002\000\002\246\007\000\001\246\002\000\001;\001\246\002\000\001\246\002\000\001\246\001\000\002\246\034\000\001\247\001:\001;\002\000\003\247\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\250\001;\001\000\005\250\001\000\001\250\002\000\002\250\007\000\001\250\002\000\001;\001\250\002\000\001\250\002\000\001\250\001\000\002\250\034\000\001\251\001:\001;\002\000\003\251\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\252\001;\001\000\005\252\001\000\001\252\002\000\002\252\007\000\001\252\002\000\001;\001\252\002\000\001\252\002\000\001\252\001\000\002\252\034\000\001\253\001:\001;\002\000\003\253\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\254\001;\001\000\005\254\001\000\001\254\002\000\002\254\007\000\001\254\002\000\001;\001\254\002\000\001\254\002\000\001\254\001\000\002\254\034\000\001\255\001:\001;\002\000\003\255\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\256\001;\001\000\005\256\001\000\001\256\002\000\002\256\007\000\001\256\002\000\001;\001\256\002\000\001\256\002\000\001\256\001\000\002\256\034\000\001\257\001:\001;\002\000\003\257\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\260\001;\001\000\005\260\001\000\001\260\002\000\002\260\007\000\001\260\002\000\001;\001\260\002\000\001\260\002\000\001\260\001\000\002\260\034\000\001\261\001:\001;\002\000\003\261\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\262\001;\001\000\005\262\001\000\001\262\002\000\002\262\007\000\001\262\002\000\001;\001\262\002\000\001\262\002\000\001\262\001\000\002\262\034\000\001\263\001:\001;\002\000\003\263\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\264\001;\001\000\005\264\001\000\001\264\002\000\002\264\007\000\001\264\002\000\001;\001\264\002\000\001\264\002\000\001\264\001\000\002\264\034\000\001\265\001:\001;\002\000\003\265\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\266\001;\001\000\005\266\001\000\001\266\002\000\002\266\007\000\001\266\002\000\001;\001\266\002\000\001\266\002\000\001\266\001\000\002\266\034\000\001\267\001:\001;\002\000\003\267\001?\001@\001A\003\000\001A\n\000\001;\001?'\000\001;\026\000\001;&\000\001\270\001:\001;\002\000\003\270\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\001\271\001:\001;\002\000\003\271\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\001\272\001:\001;\002\000\003\272\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\001\273\001:\001;\002\000\003\273\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002:\001;\002\000\003:\001?\001@\001A\003\000\001A\n\000\001;\001?\036\0", offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do
                result[j++] = value;
            while(--count > 0);
        }

        return j;
    }

    private static int[] zzUnpackAttribute()
    {
        int result[] = new int[187];
        int offset = 0;
        offset = zzUnpackAttribute("\003\000\001\t\033\001\006\t\004\001\001\t\004\001\001\t\001\001\001\t\001\001\001\t\002\001\002\t\001\000\002\001\001\t\001\000\004\001\001\000\034\001\001\000\001\t\002\001\003\000\004\001\001\000\031\001\003\t\002\000\017\001\001\000\003\001\001\000\002\001\001\000\002\001\001\t\006\001\001\000\001\001\001\000\001\001\001\000\001\001\001\000\001\001\001\000\001\001\001\000\001\001\001\000\001\001\001\000\005\001", offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while(--count > 0);
        }

        return j;
    }

    public RubyLexer()
    {
        zzLexicalState = 0;
        zzBuffer = new char[16384];
        zzAtBOL = true;
    }

    public int yychar()
    {
        return yychar;
    }

    public RubyLexer(Reader in)
    {
        zzLexicalState = 0;
        zzBuffer = new char[16384];
        zzAtBOL = true;
        zzReader = in;
    }

    public RubyLexer(InputStream in)
    {
        this(((Reader) (new InputStreamReader(in))));
    }

    private static char[] zzUnpackCMap(String packed)
    {
        char map[] = new char[0x10000];
        int i = 0;
        int j = 0;
        while(i < 178) 
        {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do
                map[j++] = value;
            while(--count > 0);
        }
        return map;
    }

    private boolean zzRefill()
        throws IOException
    {
        if(zzStartRead > 0)
        {
            System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }
        if(zzCurrentPos >= zzBuffer.length)
        {
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }
        int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);
        if(numRead > 0)
        {
            zzEndRead += numRead;
            return false;
        }
        if(numRead == 0)
        {
            int c = zzReader.read();
            if(c == -1)
            {
                return true;
            } else
            {
                zzBuffer[zzEndRead++] = (char)c;
                return false;
            }
        } else
        {
            return true;
        }
    }

    public final void yyclose()
        throws IOException
    {
        zzAtEOF = true;
        zzEndRead = zzStartRead;
        if(zzReader != null)
            zzReader.close();
    }

    public final void yyreset(Reader reader)
    {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = 0;
    }

    public final int yystate()
    {
        return zzLexicalState;
    }

    public final void yybegin(int newState)
    {
        zzLexicalState = newState;
    }

    public final String yytext()
    {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    public final char yycharat(int pos)
    {
        return zzBuffer[zzStartRead + pos];
    }

    public final int yylength()
    {
        return zzMarkedPos - zzStartRead;
    }

    private void zzScanError(int errorCode)
    {
        String message;
        try
        {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch(ArrayIndexOutOfBoundsException e)
        {
            message = ZZ_ERROR_MSG[0];
        }
        throw new Error(message);
    }

    public void yypushback(int number)
    {
        if(number > yylength())
            zzScanError(2);
        zzMarkedPos -= number;
    }

    public Token yylex()
        throws IOException
    {
        int zzEndReadL = zzEndRead;
        char zzBufferL[] = zzBuffer;
        char zzCMapL[] = ZZ_CMAP;
        int zzTransL[] = ZZ_TRANS;
        int zzRowMapL[] = ZZ_ROWMAP;
        int zzAttrL[] = ZZ_ATTRIBUTE;
        do
        {
            int zzMarkedPosL = zzMarkedPos;
            yychar += zzMarkedPosL - zzStartRead;
            int zzAction = -1;
            int zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
            zzState = ZZ_LEXSTATE[zzLexicalState];
            int zzInput;
            int zzAttributes;
label0:
            do
            {
                do
                {
                    if(zzCurrentPosL < zzEndReadL)
                    {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    } else
                    {
                        if(zzAtEOF)
                        {
                            zzInput = -1;
                            break label0;
                        }
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if(eof)
                        {
                            zzInput = -1;
                            break label0;
                        }
                        zzInput = zzBufferL[zzCurrentPosL++];
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if(zzNext == -1)
                        break label0;
                    zzState = zzNext;
                    zzAttributes = zzAttrL[zzState];
                } while((zzAttributes & 1) != 1);
                zzAction = zzState;
                zzMarkedPosL = zzCurrentPosL;
            } while((zzAttributes & 8) != 8);
            zzMarkedPos = zzMarkedPosL;
            switch(zzAction >= 0 ? ZZ_ACTION[zzAction] : zzAction)
            {
            case 7: // '\007'
                return token(TokenType.OPERATOR, -1);

            case 18: // '\022'
                return token(TokenType.KEYWORD);

            case 4: // '\004'
                return token(TokenType.NUMBER);

            case 5: // '\005'
                return token(TokenType.OPERATOR);

            case 8: // '\b'
                return token(TokenType.OPERATOR, 3);

            case 9: // '\t'
                return token(TokenType.OPERATOR, -3);

            case 23: // '\027'
                yybegin(0);
                return token(TokenType.STRING, tokenStart, tokenLength + 3);

            case 21: // '\025'
                return token(TokenType.KEYWORD, -4);

            case 22: // '\026'
                yybegin(4);
                tokenStart = yychar;
                tokenLength = 3;
                break;

            case 13: // '\r'
                tokenLength += yylength();
                break;

            case 14: // '\016'
                yybegin(0);
                break;

            case 12: // '\f'
                yybegin(2);
                tokenStart = yychar;
                tokenLength = 1;
                break;

            case 15: // '\017'
                yybegin(0);
                return token(TokenType.STRING, tokenStart, tokenLength + 1);

            case 24: // '\030'
                return token(TokenType.TYPE);

            case 11: // '\013'
                return token(TokenType.OPERATOR, -2);

            case 19: // '\023'
                return token(TokenType.KEYWORD, 4);

            case 6: // '\006'
                return token(TokenType.OPERATOR, 1);

            case 3: // '\003'
                return token(TokenType.IDENTIFIER);

            case 20: // '\024'
                tokenLength += 2;
                break;

            case 17: // '\021'
                return token(TokenType.TYPE2);

            case 16: // '\020'
                tokenLength++;
                break;

            case 10: // '\n'
                return token(TokenType.OPERATOR, 2);

            case 2: // '\002'
                return token(TokenType.COMMENT);

            default:
                if(zzInput == -1 && zzStartRead == zzCurrentPos)
                {
                    zzAtEOF = true;
                    return null;
                }
                zzScanError(1);
                break;

            case 1: // '\001'
            case 25: // '\031'
            case 26: // '\032'
            case 27: // '\033'
            case 28: // '\034'
            case 29: // '\035'
            case 30: // '\036'
            case 31: // '\037'
            case 32: // ' '
            case 33: // '!'
            case 34: // '"'
            case 35: // '#'
            case 36: // '$'
            case 37: // '%'
            case 38: // '&'
            case 39: // '\''
            case 40: // '('
            case 41: // ')'
            case 42: // '*'
            case 43: // '+'
            case 44: // ','
            case 45: // '-'
            case 46: // '.'
            case 47: // '/'
            case 48: // '0'
                break;
            }
        } while(true);
    }

    public static final int YYEOF = -1;
    private static final int ZZ_BUFFERSIZE = 16384;
    public static final int ML_STRING = 4;
    public static final int STRING = 2;
    public static final int YYINITIAL = 0;
    private static final int ZZ_LEXSTATE[] = {
        0, 0, 1, 1, 2, 2
    };
    private static final String ZZ_CMAP_PACKED = "\t\000\001\003\001\002\001\000\001\003\001\001\022\000\001\003\001<\001=\001\004\001\000\0017\0017\001\000\001/\0010\0015\001\022\001:\001\022\001\020\0016\001\007\001\r\002\f\004\016\002\b\001:\001:\0018\001;\0019\001?\001:\001\013\001\024\001\013\001$\001\025\001\017\001\026\001\005\001\027\001>\001\005\001\t\001\005\001\030\t\005\001\n\002\005\0013\001\023\0014\0017\001\006\001:\001\035\001*\001)\001'\001\021\001!\001.\001#\001\037\001>\001+\001 \001,\001\031\001%\001&\001\005\001\034\001\032\001\036\001\033\001\005\001\"\001-\001(\001\005\0011\0017\0012\001:\uFF81\0";
    private static final char ZZ_CMAP[] = zzUnpackCMap("\t\000\001\003\001\002\001\000\001\003\001\001\022\000\001\003\001<\001=\001\004\001\000\0017\0017\001\000\001/\0010\0015\001\022\001:\001\022\001\020\0016\001\007\001\r\002\f\004\016\002\b\001:\001:\0018\001;\0019\001?\001:\001\013\001\024\001\013\001$\001\025\001\017\001\026\001\005\001\027\001>\001\005\001\t\001\005\001\030\t\005\001\n\002\005\0013\001\023\0014\0017\001\006\001:\001\035\001*\001)\001'\001\021\001!\001.\001#\001\037\001>\001+\001 \001,\001\031\001%\001&\001\005\001\034\001\032\001\036\001\033\001\005\001\"\001-\001(\001\005\0011\0017\0012\001:\uFF81\0");
    private static final int ZZ_ACTION[] = zzUnpackAction();
    private static final String ZZ_ACTION_PACKED_0 = "\003\000\003\001\001\002\001\003\001\001\002\004\001\005\001\003\001\005\021\003\001\006\001\007\001\b\001\t\001\n\001\013\005\005\001\001\001\f\001\r\002\016\001\001\001\017\002\020\001\001\002\002\001\021\001\000\003\004\001\000\004\004\001\000\020\003\001\022\001\023\n\003\001\000\001\024\002\r\003\000\004\004\001\000\001\003\001\025\020\003\001\023\006\003\001\026\001\r\001\027\002\000\002\004\r\003\001\000\002\004\001\003\001\000\002\004\001\000\002\004\001\030\006\004\001\000\001\004\001\000\001\004\001\000\001\004\001\000\001\004\001\000\001\004\001\000\001\004\001\000\001\004\001\000\005\004";
    private static final int ZZ_ROWMAP[] = zzUnpackRowMap();
    private static final String ZZ_ROWMAP_PACKED_0 = "\000\000\000@\000\200\000\300\000\u0100\000\u0140\000\u0180\000\u01C0\000\u0200\000\u0240\000\u0280\000\u02C0\000\u0300\000\u0340\000\u0380\000\u03C0\000\u0400\000\u0440\000\u0480\000\u04C0\000\u0500\000\u0540\000\u0580\000\u05C0\000\u0600\000\u0640\000\u0680\000\u06C0\000\u0700\000\u0740\000\u0780\000\300\000\300\000\300\000\300\000\300\000\300\000\u07C0\000\u0800\000\u0840\000\u0880\000\300\000\u0340\000\u08C0\000\u0900\000\u0940\000\300\000\u0980\000\300\000\u09C0\000\300\000\u0A00\000\u0A40\000\300\000\300\000\u0A80\000\u0AC0\000\u0B00\000\300\000\u0B40\000\u0B80\000\u0BC0\000\u0C00\000\u0C40\000\u0C80\000\u0CC0\000\u0D00\000\u0D40\000\u0D80\000\u0DC0\000\u0E00\000\u0E40\000\u0E80\000\u0EC0\000\u0F00\000\u0F40\000\u0F80\000\u0FC0\000\u1000\000\u1040\000\u1080\000\u01C0\000\u01C0\000\u10C0\000\u1100\000\u1140\000\u1180\000\u11C0\000\u1200\000\u1240\000\u1280\000\u12C0\000\u1300\000\u1340\000\300\000\u1380\000\u13C0\000\u1400\000\u1440\000\u1480\000\u14C0\000\u1500\000\u1540\000\u1580\000\u15C0\000\u1600\000\u01C0\000\u1640\000\u1680\000\u16C0\000\u1700\000\u1740\000\u1780\000\u17C0\000\u1800\000\u1840\000\u1880\000\u18C0\000\u1900\000\u1940\000\u1980\000\u19C0\000\u1A00\000\u1A40\000\u1A80\000\u1AC0\000\u1B00\000\u1B40\000\u1B80\000\u1BC0\000\300\000\300\000\300\000\u1C00\000\u1C40\000\u1C80\000\u1CC0\000\u1D00\000\u1D40\000\u1D80\000\u1DC0\000\u1E00\000\u1E40\000\u1E80\000\u1EC0\000\u1F00\000\u1F40\000\u1F80\000\u1FC0\000\u2000\000\u2040\000\u2080\000\u20C0\000\u2100\000\u2140\000\u2180\000\u21C0\000\u2200\000\u2240\000\u2280\000\300\000\u22C0\000\u2300\000\u2340\000\u2380\000\u23C0\000\u2400\000\u2440\000\u2480\000\u24C0\000\u2500\000\u2540\000\u2580\000\u25C0\000\u2600\000\u2640\000\u2680\000\u26C0\000\u2700\000\u2740\000\u2780\000\u27C0\000\u2800\000\u2840\000\u2880\000\u28C0\000\u2900";
    private static final int ZZ_TRANS[] = zzUnpackTrans();
    private static final String ZZ_TRANS_PACKED_0 = "\001\004\001\005\001\004\001\006\001\007\001\b\001\t\001\n\001\013\003\b\003\013\001\b\001\f\001\r\001\016\001\004\001\017\001\020\003\b\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\b\001\030\001\031\002\b\001\032\001\b\001\033\001\034\001\035\001\036\001\b\001\037\002\b\001 \001!\001\"\001#\001$\001%\001&\001'\001\016\001(\001)\001*\001\016\001+\001,\001\b\001\004\001-\001.\001/\020-\0010)-\0011\003-\0012\0013\020-\0010)-\0014\002-B\000\001\004@\000\001\006<\000\001\007\0015\0016=\007\005\000\013\b\001\000\001\b\002\000\033\b\017\000\001\b\0017\006\000\0018@\000\0019\001:\001;\001<\001\000\001=\001>\001=\001?\001@\001A\003\000\001A\n\000\001;\001?\013\000\001<\031\000\002\013\001;\002\000\003\013\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002@\003\000\003@\001\000\001*4\000\013\b\001\000\001\b\002\000\005\b\001B\006\b\001C\016\b\017\000\001\b\0017;\000\001*\t\000\013\b\001\000\001\b\002\000\001\b\001D\031\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\004\b\001E\026\b\017\000\001\b\0017\005\000\013\b\001\000\001F\002\000\013\b\001G\005\b\001H\t\b\017\000\001\b\0017\005\000\013\b\001\000\001I\002\000\007\b\001J\023\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\005\b\001K\025\b\017\000\001\b\0017\005\000\013\b\001\000\001L\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\005\b\001M\001N\005\b\001O\016\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\b\b\001P\006\b\001Q\013\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\005\b\001R\007\b\001S\r\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\t\b\001T\007\b\001U\t\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\017\b\001V\013\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\b\b\001R\022\b\017\000\001\b\0017\005\000\013\b\001\000\001W\002\000\021\b\001S\t\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\013\b\001X\017\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\t\b\001Y\002\b\001Z\016\b\017\000\001\b\0017\005\000\013\b\001\000\001[\002\000\b\b\001\\\022\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\021\b\001]\t\b\017\000\001\b\00175\000\001\016\005\000\001*:\000\001\016\004\000\001*<\000\001\016\001*\001\000\001*=\000\001\016\001\000\001*A\000\001^\002\000\001-\002\000\020-\001\000)-\001\000\002-\002\000\001/=\000\002_\001\000\004_\001`\004_\002`\001a1_\002\000\0013z\000\001b\004\000\0016F\000\001c\005\000\001d7\000\0019\001:\001;\002\000\001=\001>\001=\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002:\003\000\003:\001?\001@\001A\003\000\001A\013\000\001?%\000\001e\001f\002\000\005f\001\000\001f\002\000\002f\007\000\001f\003\000\001f\002\000\001f\002\000\001f\001\000\002f\034\000\001g\001:\001;\002\000\003g\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\001=\001:\001;\002\000\003=\001?\001@\001A\003\000\001A\n\000\001;\001?\\\000\001;\b\000\002@\003\000\003@\001?\001\000\001A\003\000\001A\013\000\001?%\000\002h\003\000\003h\003\000\001i2\000\013\b\001\000\001\b\002\000\006\b\001j\f\b\001k\007\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001l\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\002\b\001m\030\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\020\b\001R\n\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\031\b\001H\001\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\f\b\001R\016\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\n\b\001R\020\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\f\b\001n\016\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\022\b\001o\b\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\n\b\001p\001\b\001q\006\b\001r\007\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001s\003\b\001t\b\b\001u\007\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\023\b\001R\007\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001v\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\013\b\001w\017\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\007\b\001x\023\b\017\000\001\b\0017\005\000\013\b\001\000\001y\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\f\b\001z\016\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\b\b\001S\022\b\017\000\001\b\0017\005\000\013\b\001\000\001y\002\000\013\b\001{\017\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\r\b\001|\r\b\017\000\001\b\0017\005\000\013\b\001\000\001}\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001~\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\t\b\001\177\021\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\032\b\001\200\017\000\001\b\0017\005\000\013\b\001\000\001\201\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\023\b\001\202\007\b\017\000\001\b\0017=\000\001\203\t\000\001a\004\000\003a8\000\001\204\004\000\003\204n\000\001\205\031\000\001\206?\000\001\207/\000\001e\001f\001;\001\000\005f\001\000\001f\002\000\002f\007\000\001f\002\000\001;\001f\002\000\001f\002\000\001f\001\000\002f\034\000\002\210\001;\001\000\005\210\001\000\001\210\002\000\002\210\007\000\001\210\002\000\001;\001\210\002\000\001\210\002\000\001\210\001\000\002\210\034\000\001\211\001:\001;\002\000\003\211\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002h\003\000\003h\001?\021\000\001?%\000\002h\003\000\003h6\000\013\b\001\000\001\b\002\000\007\b\001\212\023\b\017\000\001\b\0017\005\000\013\b\001\000\001R\002\000\013\b\001n\017\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\003\b\001\213\027\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\r\b\001R\r\b\017\000\001\b\0017\005\000\013\b\001\000\001\032\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\013\b\001\214\017\b\017\000\001\b\0017\005\000\013\b\001\000\001\215\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001n\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\025\b\001P\005\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\007\b\001\216\001\217\022\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\021\b\001R\t\b\017\000\001\b\0017\005\000\013\b\001\000\001\220\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\t\b\001\221\021\b\017\000\001\b\0017\005\000\013\b\001\000\001R\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\005\b\001R\025\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001x\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\f\b\001~\016\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\013\b\001\222\017\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\f\b\001M\016\b\017\000\001\b\0017\005\000\013\b\001\000\001S\002\000\033\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001\223\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\013\b\001\224\017\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\t\b\001\225\021\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\007\b\001\226\023\b\017\000\001\b\0017\030\000\001\2270\000\001\227=\000\002\230\001;\001\000\005\230\001\000\001\230\002\000\002\230\007\000\001\230\002\000\001;\001\230\002\000\001\230\002\000\001\230\001\000\002\230\034\000\001\231\001:\001;\002\000\003\231\001?\001@\001A\003\000\001A\n\000\001;\001?#\000\013\b\001\000\001\b\002\000\b\b\001x\022\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\004\b\001R\026\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\f\b\001S\016\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001\221\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\b\b\001y\022\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\024\b\001R\006\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\b\b\001H\022\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001R\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\005\b\001\232\025\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\006\b\001S\024\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\005\b\001S\025\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\027\b\001R\003\b\017\000\001\b\0017\005\000\013\b\001\000\001\b\002\000\f\b\001x\016\b\017\000\001\b\0017\025\000\001\2331\000\002\234\001;\001\000\005\234\001\000\001\234\002\000\002\234\007\000\001\234\002\000\001;\001\234\002\000\001\234\002\000\001\234\001\000\002\234\034\000\001\235\001:\001;\002\000\003\235\001?\001@\001A\003\000\001A\n\000\001;\001?#\000\013\b\001\000\001M\002\000\033\b\017\000\001\b\0017\006\000\001\236@\000\002\237\001;\001\000\005\237\001\000\001\237\002\000\002\237\007\000\001\237\002\000\001;\001\237\002\000\001\237\002\000\001\237\001\000\002\237\034\000\001\240\001:\001;\002\000\003\240\001?\001@\001A\003\000\001A\n\000\001;\001?$\000\001\241@\000\002\242\001;\001\000\005\242\001\000\001\242\002\000\002\242\007\000\001\242\002\000\001;\001\242\002\000\001\242\002\000\001\242\001\000\002\242\034\000\001\243\001:\001;\002\000\003\243\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\244\001;\001\000\005\244\001\000\001\244\002\000\002\244\007\000\001\244\002\000\001;\001\244\002\000\001\244\002\000\001\244\001\000\002\244\034\000\001\245\001:\001;\002\000\003\245\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\246\001;\001\000\005\246\001\000\001\246\002\000\002\246\007\000\001\246\002\000\001;\001\246\002\000\001\246\002\000\001\246\001\000\002\246\034\000\001\247\001:\001;\002\000\003\247\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\250\001;\001\000\005\250\001\000\001\250\002\000\002\250\007\000\001\250\002\000\001;\001\250\002\000\001\250\002\000\001\250\001\000\002\250\034\000\001\251\001:\001;\002\000\003\251\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\252\001;\001\000\005\252\001\000\001\252\002\000\002\252\007\000\001\252\002\000\001;\001\252\002\000\001\252\002\000\001\252\001\000\002\252\034\000\001\253\001:\001;\002\000\003\253\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\254\001;\001\000\005\254\001\000\001\254\002\000\002\254\007\000\001\254\002\000\001;\001\254\002\000\001\254\002\000\001\254\001\000\002\254\034\000\001\255\001:\001;\002\000\003\255\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\256\001;\001\000\005\256\001\000\001\256\002\000\002\256\007\000\001\256\002\000\001;\001\256\002\000\001\256\002\000\001\256\001\000\002\256\034\000\001\257\001:\001;\002\000\003\257\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\260\001;\001\000\005\260\001\000\001\260\002\000\002\260\007\000\001\260\002\000\001;\001\260\002\000\001\260\002\000\001\260\001\000\002\260\034\000\001\261\001:\001;\002\000\003\261\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\262\001;\001\000\005\262\001\000\001\262\002\000\002\262\007\000\001\262\002\000\001;\001\262\002\000\001\262\002\000\001\262\001\000\002\262\034\000\001\263\001:\001;\002\000\003\263\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\264\001;\001\000\005\264\001\000\001\264\002\000\002\264\007\000\001\264\002\000\001;\001\264\002\000\001\264\002\000\001\264\001\000\002\264\034\000\001\265\001:\001;\002\000\003\265\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002\266\001;\001\000\005\266\001\000\001\266\002\000\002\266\007\000\001\266\002\000\001;\001\266\002\000\001\266\002\000\001\266\001\000\002\266\034\000\001\267\001:\001;\002\000\003\267\001?\001@\001A\003\000\001A\n\000\001;\001?'\000\001;\026\000\001;&\000\001\270\001:\001;\002\000\003\270\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\001\271\001:\001;\002\000\003\271\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\001\272\001:\001;\002\000\003\272\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\001\273\001:\001;\002\000\003\273\001?\001@\001A\003\000\001A\n\000\001;\001?%\000\002:\001;\002\000\003:\001?\001@\001A\003\000\001A\n\000\001;\001?\036\0";
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final String ZZ_ERROR_MSG[] = {
        "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large"
    };
    private static final int ZZ_ATTRIBUTE[] = zzUnpackAttribute();
    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\003\000\001\t\033\001\006\t\004\001\001\t\004\001\001\t\001\001\001\t\001\001\001\t\002\001\002\t\001\000\002\001\001\t\001\000\004\001\001\000\034\001\001\000\001\t\002\001\003\000\004\001\001\000\031\001\003\t\002\000\017\001\001\000\003\001\001\000\002\001\001\000\002\001\001\t\006\001\001\000\001\001\001\000\001\001\001\000\001\001\001\000\001\001\001\000\001\001\001\000\001\001\001\000\001\001\001\000\005\001";
    private Reader zzReader;
    private int zzState;
    private int zzLexicalState;
    private char zzBuffer[];
    private int zzMarkedPos;
    private int zzCurrentPos;
    private int zzStartRead;
    private int zzEndRead;
    private int yyline;
    private int yychar;
    private int yycolumn;
    private boolean zzAtBOL;
    private boolean zzAtEOF;
    private boolean zzEOFDone;
    private static final byte PARAN = 1;
    private static final byte BRACKET = 2;
    private static final byte CURLY = 3;
    private static final byte WORD = 4;

}
