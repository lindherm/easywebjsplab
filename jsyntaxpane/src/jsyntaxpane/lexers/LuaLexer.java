// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   LuaLexer.java

package jsyntaxpane.lexers;

import java.io.*;
import jsyntaxpane.Token;
import jsyntaxpane.TokenType;

// Referenced classes of package jsyntaxpane.lexers:
//            DefaultJFlexLexer

public final class LuaLexer extends DefaultJFlexLexer
{

    private static int[] zzUnpackAction()
    {
        int result[] = new int[97];
        int offset = 0;
        offset = zzUnpackAction("\002\000\003\001\002\002\001\003\002\004\001\002\r\003\001\002\001\001\001\005\001\006\002\007\001\001\001\b\001\t\002\000\002\004\001\000\001\002\003\003\001\n\n\003\001\013\004\t\001\000\002\004\001\000\001\004\013\003\001\t\001\000\001\004\003\003\001\n\001\003\004\t\001\004\002\003\002\000\001\004\001\003\001\t\003\004", offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while(--count > 0);
        }

        return j;
    }

    private static int[] zzUnpackRowMap()
    {
        int result[] = new int[97];
        int offset = 0;
        offset = zzUnpackRowMap("\000\000\000)\000R\000{\000\244\000\315\000R\000\366\000\u011F\000\u0148\000\u0171\000\u019A\000\u01C3\000\u01EC\000\u0215\000\u023E\000\u0267\000\u0290\000\u02B9\000\u02E2\000\u030B\000\u0334\000\u035D\000\u0386\000\u03AF\000\u03AF\000R\000\u03D8\000\u0401\000R\000\u042A\000R\000\u0453\000\u047C\000\u04A5\000R\000\u04CE\000\u04F7\000\u0520\000\u0549\000\u0572\000\u059B\000\366\000\u05C4\000\u05ED\000\u0616\000\u063F\000\u0668\000\u0691\000\u06BA\000\u06E3\000\u070C\000\u0735\000R\000\u075E\000\u0787\000R\000\u07B0\000\u07D9\000\u04A5\000\u0802\000\u082B\000\u0854\000\u087D\000\u08A6\000\u08CF\000\u08F8\000\u0921\000\u094A\000\u0973\000\u099C\000\u09C5\000\u09EE\000\u0A17\000\u0A40\000\u0A69\000\u0A92\000\u0ABB\000\u0AE4\000\u0B0D\000\u0B36\000\u0B5F\000\u0B88\000\u0BB1\000\u0BDA\000\u0A69\000\u0C03\000\u0C2C\000\u0C55\000\u0BDA\000\u0C7E\000\u0CA7\000\u0CD0\000\u0CF9\000\u0D22\000\u0D4B\000\u0D74", offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }

        return j;
    }

    private static int[] zzUnpackTrans()
    {
        int result[] = new int[3485];
        int offset = 0;
        offset = zzUnpackTrans("\001\003\001\004\001\003\001\005\001\006\002\007\001\b\001\003\001\t\001\n\003\b\001\013\001\b\001\007\001\003\001\f\001\r\001\016\001\017\001\020\001\021\001\b\001\022\001\023\001\b\001\024\001\025\001\026\001\b\001\027\002\b\001\030\001\007\001\031\001\032\001\031\001\033\001\034\001\035\001\036\016\034\001\037\026\034\001 +\000\001\003)\000\001\005)\000\001!\001\"*\000\007\b\001\000\001\b\002\000\022\b\016\000\002\n\001#\001\000\001$\001%\001&\007\000\001&\005\000\001$\024\000\002\n\002\000\001$\001%\001&\007\000\001&\005\000\001$\024\000\002%\003\000\001'!\000\007\b\001\000\001\b\002\000\001\b\001(\020\b\f\000\007\b\001\000\001\b\002\000\007\b\001)\002\b\001*\007\b\f\000\007\b\001\000\001\b\002\000\007\b\001+\n\b\f\000\007\b\001\000\001\b\002\000\004\b\001,\r\b\f\000\007\b\001\000\001\b\002\000\005\b\001-\f\b\f\000\007\b\001\000\001\b\002\000\001\b\001(\006\b\001.\t\b\f\000\007\b\001\000\001\b\002\000\004\b\001+\r\b\f\000\007\b\001\000\001\b\002\000\007\b\001/\n\b\f\000\007\b\001\000\001\b\002\000\001\b\001+\t\b\001+\006\b\f\000\007\b\001\000\001\b\002\000\0010\006\b\001\022\004\b\0011\005\b\f\000\007\b\001\000\001\b\002\000\001\b\0012\020\b\f\000\007\b\001\000\001\b\002\000\004\b\0013\013\b\0014\001\b\f\000\007\b\001\000\001\b\002\000\020\b\0015\001\b*\000\001\007\003\000\001\034\002\000\016\034\001\000\026\034\003\000\001\036&\000\0026\001\000&6\0017\0018\0019\0027\001:#7\005\000\001;,\000\001<\001=\001\000\002=\001\000\001=\002\000\001=\001\000\002=\001\000\001=\005\000\001=\001\000\001=\022\000\002%\002\000\001$\001\000\001&\007\000\001&\005\000\001$\017\000\001>\004\000\002?\005\000\001>&\000\001\007!\000\007\b\001\000\001\b\002\000\002\b\001+\017\b\f\000\007\b\001\000\001\b\002\000\016\b\001+\003\b\f\000\007\b\001\000\001\b\002\000\b\b\001+\t\b\f\000\007\b\001\000\001\b\002\000\005\b\001@\f\b\f\000\007\b\001\000\001\b\002\000\016\b\001A\001B\002\b\f\000\007\b\001\000\001\b\002\000\t\b\001C\b\b\f\000\007\b\001\000\001\b\002\000\r\b\001D\004\b\f\000\007\b\001\000\001\b\002\000\b\b\001E\t\b\f\000\007\b\001\000\001\b\002\000\001\b\001F\020\b\f\000\007\b\001\000\001\b\002\000\016\b\001G\003\b\f\000\007\b\001\000\001\b\002\000\f\b\001H\005\b\f\000\007\b\001\000\001\b\002\000\005\b\001I\f\b\f\000\007\b\001\000\001\b\002\000\n\b\001J\007\b\005\000\0017\0018\0019&7\002\000\0019&\000\0017\0018\0019\0027\001K#7\006\000\001L+\000\002M\001\000\002M\001\000\001M\002\000\001M\001\000\002M\001\000\001M\005\000\001M\001\000\001M\022\000\002?'\000\002?\002\000\001$\017\000\001$\022\000\007\b\001\000\001\b\002\000\001N\021\b\f\000\007\b\001\000\001\b\002\000\f\b\001O\005\b\f\000\007\b\001\000\001\b\002\000\005\b\001P\f\b\f\000\007\b\001\000\001\b\002\000\005\b\001Q\f\b\f\000\007\b\001\000\001\b\002\000\001*\021\b\f\000\007\b\001\000\001\b\002\000\t\b\001H\b\b\f\000\007\b\001\000\001\b\002\000\r\b\001R\004\b\f\000\007\b\001\000\001\b\002\000\n\b\001*\007\b\f\000\007\b\001\000\001\b\002\000\005\b\001+\f\b\f\000\007\b\001\000\001\b\002\000\001\b\001+\020\b\f\000\007\b\001\000\001\b\002\000\b\b\001H\t\b\005\000\001S\001T\001U\003S\0017\"S\006\000\001V+\000\002W\001\000\002W\001\000\001W\002\000\001W\001\000\002W\001\000\001W\005\000\001W\001\000\001W\020\000\007\b\001\000\001\b\002\000\006\b\001+\013\b\f\000\007\b\001\000\001\b\002\000\004\b\001I\r\b\f\000\007\b\001\000\001\b\002\000\001)\021\b\f\000\007\b\001\000\001\b\002\000\n\b\001X\007\b\f\000\007\b\001\000\001\b\002\000\016\b\001Y\003\b\005\000\001S\001T\001U\003S\001K\"S\002Z\001U\003Z\001[(Z\001[\"Z\t\000\002\\\001\000\002\\\001\000\001\\\002\000\001\\\001\000\002\\\001\000\001\\\005\000\001\\\001\000\001\\\020\000\007\b\001\000\001\b\002\000\013\b\001+\006\b\f\000\007\b\001\000\001\b\002\000\n\b\001]\007\b\005\000\006Z\001^\"Z\t\000\002_\001\000\002_\001\000\001_\002\000\001_\001\000\002_\001\000\001_\005\000\001_\001\000\001_\020\000\007\b\001\000\001\b\002\000\007\b\001I\n\b\013\000\0019+\000\002`\001\000\002`\001\000\001`\002\000\001`\001\000\002`\001\000\001`\005\000\001`\001\000\001`\022\000\002a\001\000\002a\001\000\001a\002\000\001a\001\000\002a\001\000\001a\005\000\001a\001\000\001a\022\000\002$\001\000\002$\001\000\001$\002\000\001$\001\000\002$\001\000\001$\005\000\001$\001\000\001$\t\0", offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do
                result[j++] = value;
            while(--count > 0);
        }

        return j;
    }

    private static int[] zzUnpackAttribute()
    {
        int result[] = new int[97];
        int offset = 0;
        offset = zzUnpackAttribute("\002\000\001\t\003\001\001\t\023\001\001\t\002\001\001\t\001\001\001\t\001\001\002\000\001\t\001\001\001\000\017\001\001\t\002\001\001\t\001\001\001\000\002\001\001\000\r\001\001\000\r\001\002\000\006\001", offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while(--count > 0);
        }

        return j;
    }

    public LuaLexer()
    {
        zzLexicalState = 0;
        zzBuffer = new char[16384];
        zzAtBOL = true;
    }

    public int yychar()
    {
        return yychar;
    }

    public LuaLexer(Reader in)
    {
        zzLexicalState = 0;
        zzBuffer = new char[16384];
        zzAtBOL = true;
        zzReader = in;
    }

    public LuaLexer(InputStream in)
    {
        this(((Reader) (new InputStreamReader(in))));
    }

    private static char[] zzUnpackCMap(String packed)
    {
        char map[] = new char[0x10000];
        int i = 0;
        int j = 0;
        while(i < 1760) 
        {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do
                map[j++] = value;
            while(--count > 0);
        }
        return map;
    }

    private boolean zzRefill()
        throws IOException
    {
        if(zzStartRead > 0)
        {
            System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }
        if(zzCurrentPos >= zzBuffer.length)
        {
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }
        int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);
        if(numRead > 0)
        {
            zzEndRead += numRead;
            return false;
        }
        if(numRead == 0)
        {
            int c = zzReader.read();
            if(c == -1)
            {
                return true;
            } else
            {
                zzBuffer[zzEndRead++] = (char)c;
                return false;
            }
        } else
        {
            return true;
        }
    }

    public final void yyclose()
        throws IOException
    {
        zzAtEOF = true;
        zzEndRead = zzStartRead;
        if(zzReader != null)
            zzReader.close();
    }

    public final void yyreset(Reader reader)
    {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = 0;
    }

    public final int yystate()
    {
        return zzLexicalState;
    }

    public final void yybegin(int newState)
    {
        zzLexicalState = newState;
    }

    public final String yytext()
    {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    public final char yycharat(int pos)
    {
        return zzBuffer[zzStartRead + pos];
    }

    public final int yylength()
    {
        return zzMarkedPos - zzStartRead;
    }

    private void zzScanError(int errorCode)
    {
        String message;
        try
        {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch(ArrayIndexOutOfBoundsException e)
        {
            message = ZZ_ERROR_MSG[0];
        }
        throw new Error(message);
    }

    public void yypushback(int number)
    {
        if(number > yylength())
            zzScanError(2);
        zzMarkedPos -= number;
    }

    public Token yylex()
        throws IOException
    {
        int zzEndReadL = zzEndRead;
        char zzBufferL[] = zzBuffer;
        char zzCMapL[] = ZZ_CMAP;
        int zzTransL[] = ZZ_TRANS;
        int zzRowMapL[] = ZZ_ROWMAP;
        int zzAttrL[] = ZZ_ATTRIBUTE;
        do
        {
            int zzMarkedPosL = zzMarkedPos;
            yychar += zzMarkedPosL - zzStartRead;
            int zzAction = -1;
            int zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
            zzState = ZZ_LEXSTATE[zzLexicalState];
            int zzInput;
            int zzAttributes;
label0:
            do
            {
                do
                {
                    if(zzCurrentPosL < zzEndReadL)
                    {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    } else
                    {
                        if(zzAtEOF)
                        {
                            zzInput = -1;
                            break label0;
                        }
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if(eof)
                        {
                            zzInput = -1;
                            break label0;
                        }
                        zzInput = zzBufferL[zzCurrentPosL++];
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if(zzNext == -1)
                        break label0;
                    zzState = zzNext;
                    zzAttributes = zzAttrL[zzState];
                } while((zzAttributes & 1) != 1);
                zzAction = zzState;
                zzMarkedPosL = zzCurrentPosL;
            } while((zzAttributes & 8) != 8);
            zzMarkedPos = zzMarkedPosL;
            switch(zzAction >= 0 ? ZZ_ACTION[zzAction] : zzAction)
            {
            case 10: // '\n'
                return token(TokenType.KEYWORD);

            case 5: // '\005'
                yybegin(2);
                tokenStart = yychar;
                tokenLength = 1;
                break;

            case 8: // '\b'
                yybegin(0);
                return token(TokenType.STRING, tokenStart, tokenLength + 1);

            case 2: // '\002'
                return token(TokenType.OPERATOR);

            case 11: // '\013'
                tokenLength += 2;
                break;

            case 3: // '\003'
                return token(TokenType.IDENTIFIER);

            case 9: // '\t'
                return token(TokenType.COMMENT);

            case 4: // '\004'
                return token(TokenType.NUMBER);

            case 7: // '\007'
                yybegin(0);
                break;

            case 6: // '\006'
                tokenLength += yylength();
                break;

            default:
                if(zzInput == -1 && zzStartRead == zzCurrentPos)
                {
                    zzAtEOF = true;
                    return null;
                }
                zzScanError(1);
                break;

            case 1: // '\001'
            case 12: // '\f'
            case 13: // '\r'
            case 14: // '\016'
            case 15: // '\017'
            case 16: // '\020'
            case 17: // '\021'
            case 18: // '\022'
            case 19: // '\023'
            case 20: // '\024'
            case 21: // '\025'
            case 22: // '\026'
                break;
            }
        } while(true);
    }

    public static final int YYEOF = -1;
    private static final int ZZ_BUFFERSIZE = 16384;
    public static final int STRING = 2;
    public static final int YYINITIAL = 0;
    private static final int ZZ_LEXSTATE[] = {
        0, 0, 1, 1
    };
    private static final String ZZ_CMAP_PACKED = "\t\b\001\003\001\002\001\000\001\003\001\001\016\b\004\000\001\003\001\000\001(\001$\001\007\001$\002\000\001$\001$\001$\001\020\001$\001\004\001\016\001$\001\t\t\n\001$\001$\001'\001%\001'\002\000\004\f\001\017\001\r\024\007\001\005\001\021\001\006\001$\001\007\001\000\001\022\001\025\001\037\001\024\001\027\001\035\001\007\001\"\001\034\001\007\001\030\001\032\001\007\001\023\001\031\001!\001\007\001\026\001\033\001 \001\036\001\007\001#\001\013\002\007\001$\001\000\001$\001&!\b\002\000\004\007\004\000\001\007\002\000\001\b\007\000\001\007\004\000\001\007\005\000\027\007\001\000\037\007\001\000\u013F\007\031\000r\007\004\000\f\007\016\000\005\007\t\000\001\007\021\000X\b\005\000\023\b\n\000\001\007\013\000\001\007\001\000\003\007\001\000\001\007\001\000\024\007\001\000,\007\001\000&\007\001\000\005\007\004\000\202\007\001\000\004\b\003\000E\007\001\000&\007\002\000\002\007\006\000\020\007!\000&\007\002\000\001\007\007\000'\007\t\000\021\b\001\000\027\b\001\000\003\b\001\000\001\b\001\000\002\b\001\000\001\b\013\000\033\007\005\000\003\007\r\000\004\b\f\000\006\b\013\000\032\007\005\000\013\007\016\b\007\000\n\b\004\000\002\007\001\bc\007\001\000\001\007\b\b\001\000\006\b\002\007\002\b\001\000\004\b\002\007\n\b\003\007\002\000\001\007\017\000\001\b\001\007\001\b\036\007\033\b\002\000\003\0070\000&\007\013\b\001\007\u014F\000\003\b6\007\002\000\001\b\001\007\020\b\002\000\001\007\004\b\003\000\n\007\002\b\002\000\n\b\021\000\003\b\001\000\b\007\002\000\002\007\002\000\026\007\001\000\007\007\001\000\001\007\003\000\004\007\002\000\001\b\001\007\007\b\002\000\002\b\002\000\003\b\t\000\001\b\004\000\002\007\001\000\003\007\002\b\002\000\n\b\004\007\r\000\003\b\001\000\006\007\004\000\002\007\002\000\026\007\001\000\007\007\001\000\002\007\001\000\002\007\001\000\002\007\002\000\001\b\001\000\005\b\004\000\002\b\002\000\003\b\013\000\004\007\001\000\001\007\007\000\f\b\003\007\f\000\003\b\001\000\t\007\001\000\003\007\001\000\026\007\001\000\007\007\001\000\002\007\001\000\005\007\002\000\001\b\001\007\b\b\001\000\003\b\001\000\003\b\002\000\001\007\017\000\002\007\002\b\002\000\n\b\001\000\001\007\017\000\003\b\001\000\b\007\002\000\002\007\002\000\026\007\001\000\007\007\001\000\002\007\001\000\005\007\002\000\001\b\001\007\006\b\003\000\002\b\002\000\003\b\b\000\002\b\004\000\002\007\001\000\003\007\004\000\n\b\001\000\001\007\020\000\001\b\001\007\001\000\006\007\003\000\003\007\001\000\004\007\003\000\002\007\001\000\001\007\001\000\002\007\003\000\002\007\003\000\003\007\003\000\b\007\001\000\003\007\004\000\005\b\003\000\003\b\001\000\004\b\t\000\001\b\017\000\t\b\t\000\001\007\007\000\003\b\001\000\b\007\001\000\003\007\001\000\027\007\001\000\n\007\001\000\005\007\004\000\007\b\001\000\003\b\001\000\004\b\007\000\002\b\t\000\002\007\004\000\n\b\022\000\002\b\001\000\b\007\001\000\003\007\001\000\027\007\001\000\n\007\001\000\005\007\002\000\001\b\001\007\007\b\001\000\003\b\001\000\004\b\007\000\002\b\007\000\001\007\001\000\002\007\004\000\n\b\022\000\002\b\001\000\b\007\001\000\003\007\001\000\027\007\001\000\020\007\004\000\006\b\002\000\003\b\001\000\004\b\t\000\001\b\b\000\002\007\004\000\n\b\022\000\002\b\001\000\022\007\003\000\030\007\001\000\t\007\001\000\001\007\002\000\007\007\003\000\001\b\004\000\006\b\001\000\001\b\001\000\b\b\022\000\002\b\r\0000\007\001\b\002\007\007\b\004\000\b\007\b\b\001\000\n\b'\000\002\007\001\000\001\007\002\000\002\007\001\000\001\007\002\000\001\007\006\000\004\007\001\000\007\007\001\000\003\007\001\000\001\007\001\000\001\007\002\000\002\007\001\000\004\007\001\b\002\007\006\b\001\000\002\b\001\007\002\000\005\007\001\000\001\007\001\000\006\b\002\000\n\b\002\000\002\007\"\000\001\007\027\000\002\b\006\000\n\b\013\000\001\b\001\000\001\b\001\000\001\b\004\000\002\b\b\007\001\000\"\007\006\000\024\b\001\000\002\b\004\007\004\000\b\b\001\000$\b\t\000\001\b9\000\"\007\001\000\005\007\001\000\002\007\001\000\007\b\003\000\004\b\006\000\n\b\006\000\006\007\004\bF\000&\007\n\000)\007\007\000Z\007\005\000D\007\005\000R\007\006\000\007\007\001\000?\007\001\000\001\007\001\000\004\007\002\000\007\007\001\000\001\007\001\000\004\007\002\000'\007\001\000\001\007\001\000\004\007\002\000\037\007\001\000\001\007\001\000\004\007\002\000\007\007\001\000\001\007\001\000\004\007\002\000\007\007\001\000\007\007\001\000\027\007\001\000\037\007\001\000\001\007\001\000\004\007\002\000\007\007\001\000'\007\001\000\023\007\016\000\t\b.\000U\007\f\000\u026C\007\002\000\b\007\n\000\032\007\005\000K\007\003\000\003\007\017\000\r\007\001\000\004\007\003\b\013\000\022\007\003\b\013\000\022\007\002\b\f\000\r\007\001\000\003\007\001\000\002\b\f\0004\007 \b\003\000\001\007\003\000\002\007\001\b\002\000\n\b!\000\003\b\002\000\n\b\006\000X\007\b\000)\007\001\bV\000\035\007\003\000\f\b\004\000\f\b\n\000\n\b\036\007\002\000\005\007\u038B\000l\007\224\000\234\007\004\000Z\007\006\000\026\007\002\000\006\007\002\000&\007\002\000\006\007\002\000\b\007\001\000\001\007\001\000\001\007\001\000\001\007\001\000\037\007\002\0005\007\001\000\007\007\001\000\001\007\003\000\003\007\001\000\007\007\003\000\004\007\002\000\006\007\004\000\r\007\005\000\003\007\001\000\007\007\017\000\004\b\032\000\005\b\020\000\002\007\023\000\001\007\013\000\004\b\006\000\006\b\001\000\001\007\r\000\001\007 \000\022\007\036\000\r\b\004\000\001\b\003\000\006\b\027\000\001\007\004\000\001\007\002\000\n\007\001\000\001\007\003\000\005\007\006\000\001\007\001\000\001\007\001\000\001\007\001\000\004\007\001\000\003\007\001\000\007\007\003\000\003\007\005\000\005\007\026\000$\007\u0E81\000\003\007\031\000\t\007\006\b\001\000\005\007\002\000\005\007\004\000V\007\002\000\002\b\002\000\003\007\001\000_\007\005\000(\007\004\000^\007\021\000\030\0078\000\020\007\u0200\000\u19B6\007J\000\u51A6\007Z\000\u048D\007\u0773\000\u2BA4\007\u215C\000\u012E\007\002\000;\007\225\000\007\007\f\000\005\007\005\000\001\007\001\b\n\007\001\000\r\007\001\000\005\007\001\000\001\007\001\000\002\007\001\000\002\007\001\000l\007!\000\u016B\007\022\000@\007\002\0006\007(\000\r\007\003\000\020\b\020\000\004\b\017\000\002\007\030\000\003\007\031\000\001\007\006\000\005\007\001\000\207\007\002\000\001\b\004\000\001\007\013\000\n\b\007\000\032\007\004\000\001\007\001\000\032\007\n\000Z\007\003\000\006\007\002\000\006\007\002\000\006\007\002\000\003\007\003\000\002\007\003\000\002\007\022\000\003\b\004\0";
    private static final char ZZ_CMAP[] = zzUnpackCMap("\t\b\001\003\001\002\001\000\001\003\001\001\016\b\004\000\001\003\001\000\001(\001$\001\007\001$\002\000\001$\001$\001$\001\020\001$\001\004\001\016\001$\001\t\t\n\001$\001$\001'\001%\001'\002\000\004\f\001\017\001\r\024\007\001\005\001\021\001\006\001$\001\007\001\000\001\022\001\025\001\037\001\024\001\027\001\035\001\007\001\"\001\034\001\007\001\030\001\032\001\007\001\023\001\031\001!\001\007\001\026\001\033\001 \001\036\001\007\001#\001\013\002\007\001$\001\000\001$\001&!\b\002\000\004\007\004\000\001\007\002\000\001\b\007\000\001\007\004\000\001\007\005\000\027\007\001\000\037\007\001\000\u013F\007\031\000r\007\004\000\f\007\016\000\005\007\t\000\001\007\021\000X\b\005\000\023\b\n\000\001\007\013\000\001\007\001\000\003\007\001\000\001\007\001\000\024\007\001\000,\007\001\000&\007\001\000\005\007\004\000\202\007\001\000\004\b\003\000E\007\001\000&\007\002\000\002\007\006\000\020\007!\000&\007\002\000\001\007\007\000'\007\t\000\021\b\001\000\027\b\001\000\003\b\001\000\001\b\001\000\002\b\001\000\001\b\013\000\033\007\005\000\003\007\r\000\004\b\f\000\006\b\013\000\032\007\005\000\013\007\016\b\007\000\n\b\004\000\002\007\001\bc\007\001\000\001\007\b\b\001\000\006\b\002\007\002\b\001\000\004\b\002\007\n\b\003\007\002\000\001\007\017\000\001\b\001\007\001\b\036\007\033\b\002\000\003\0070\000&\007\013\b\001\007\u014F\000\003\b6\007\002\000\001\b\001\007\020\b\002\000\001\007\004\b\003\000\n\007\002\b\002\000\n\b\021\000\003\b\001\000\b\007\002\000\002\007\002\000\026\007\001\000\007\007\001\000\001\007\003\000\004\007\002\000\001\b\001\007\007\b\002\000\002\b\002\000\003\b\t\000\001\b\004\000\002\007\001\000\003\007\002\b\002\000\n\b\004\007\r\000\003\b\001\000\006\007\004\000\002\007\002\000\026\007\001\000\007\007\001\000\002\007\001\000\002\007\001\000\002\007\002\000\001\b\001\000\005\b\004\000\002\b\002\000\003\b\013\000\004\007\001\000\001\007\007\000\f\b\003\007\f\000\003\b\001\000\t\007\001\000\003\007\001\000\026\007\001\000\007\007\001\000\002\007\001\000\005\007\002\000\001\b\001\007\b\b\001\000\003\b\001\000\003\b\002\000\001\007\017\000\002\007\002\b\002\000\n\b\001\000\001\007\017\000\003\b\001\000\b\007\002\000\002\007\002\000\026\007\001\000\007\007\001\000\002\007\001\000\005\007\002\000\001\b\001\007\006\b\003\000\002\b\002\000\003\b\b\000\002\b\004\000\002\007\001\000\003\007\004\000\n\b\001\000\001\007\020\000\001\b\001\007\001\000\006\007\003\000\003\007\001\000\004\007\003\000\002\007\001\000\001\007\001\000\002\007\003\000\002\007\003\000\003\007\003\000\b\007\001\000\003\007\004\000\005\b\003\000\003\b\001\000\004\b\t\000\001\b\017\000\t\b\t\000\001\007\007\000\003\b\001\000\b\007\001\000\003\007\001\000\027\007\001\000\n\007\001\000\005\007\004\000\007\b\001\000\003\b\001\000\004\b\007\000\002\b\t\000\002\007\004\000\n\b\022\000\002\b\001\000\b\007\001\000\003\007\001\000\027\007\001\000\n\007\001\000\005\007\002\000\001\b\001\007\007\b\001\000\003\b\001\000\004\b\007\000\002\b\007\000\001\007\001\000\002\007\004\000\n\b\022\000\002\b\001\000\b\007\001\000\003\007\001\000\027\007\001\000\020\007\004\000\006\b\002\000\003\b\001\000\004\b\t\000\001\b\b\000\002\007\004\000\n\b\022\000\002\b\001\000\022\007\003\000\030\007\001\000\t\007\001\000\001\007\002\000\007\007\003\000\001\b\004\000\006\b\001\000\001\b\001\000\b\b\022\000\002\b\r\0000\007\001\b\002\007\007\b\004\000\b\007\b\b\001\000\n\b'\000\002\007\001\000\001\007\002\000\002\007\001\000\001\007\002\000\001\007\006\000\004\007\001\000\007\007\001\000\003\007\001\000\001\007\001\000\001\007\002\000\002\007\001\000\004\007\001\b\002\007\006\b\001\000\002\b\001\007\002\000\005\007\001\000\001\007\001\000\006\b\002\000\n\b\002\000\002\007\"\000\001\007\027\000\002\b\006\000\n\b\013\000\001\b\001\000\001\b\001\000\001\b\004\000\002\b\b\007\001\000\"\007\006\000\024\b\001\000\002\b\004\007\004\000\b\b\001\000$\b\t\000\001\b9\000\"\007\001\000\005\007\001\000\002\007\001\000\007\b\003\000\004\b\006\000\n\b\006\000\006\007\004\bF\000&\007\n\000)\007\007\000Z\007\005\000D\007\005\000R\007\006\000\007\007\001\000?\007\001\000\001\007\001\000\004\007\002\000\007\007\001\000\001\007\001\000\004\007\002\000'\007\001\000\001\007\001\000\004\007\002\000\037\007\001\000\001\007\001\000\004\007\002\000\007\007\001\000\001\007\001\000\004\007\002\000\007\007\001\000\007\007\001\000\027\007\001\000\037\007\001\000\001\007\001\000\004\007\002\000\007\007\001\000'\007\001\000\023\007\016\000\t\b.\000U\007\f\000\u026C\007\002\000\b\007\n\000\032\007\005\000K\007\003\000\003\007\017\000\r\007\001\000\004\007\003\b\013\000\022\007\003\b\013\000\022\007\002\b\f\000\r\007\001\000\003\007\001\000\002\b\f\0004\007 \b\003\000\001\007\003\000\002\007\001\b\002\000\n\b!\000\003\b\002\000\n\b\006\000X\007\b\000)\007\001\bV\000\035\007\003\000\f\b\004\000\f\b\n\000\n\b\036\007\002\000\005\007\u038B\000l\007\224\000\234\007\004\000Z\007\006\000\026\007\002\000\006\007\002\000&\007\002\000\006\007\002\000\b\007\001\000\001\007\001\000\001\007\001\000\001\007\001\000\037\007\002\0005\007\001\000\007\007\001\000\001\007\003\000\003\007\001\000\007\007\003\000\004\007\002\000\006\007\004\000\r\007\005\000\003\007\001\000\007\007\017\000\004\b\032\000\005\b\020\000\002\007\023\000\001\007\013\000\004\b\006\000\006\b\001\000\001\007\r\000\001\007 \000\022\007\036\000\r\b\004\000\001\b\003\000\006\b\027\000\001\007\004\000\001\007\002\000\n\007\001\000\001\007\003\000\005\007\006\000\001\007\001\000\001\007\001\000\001\007\001\000\004\007\001\000\003\007\001\000\007\007\003\000\003\007\005\000\005\007\026\000$\007\u0E81\000\003\007\031\000\t\007\006\b\001\000\005\007\002\000\005\007\004\000V\007\002\000\002\b\002\000\003\007\001\000_\007\005\000(\007\004\000^\007\021\000\030\0078\000\020\007\u0200\000\u19B6\007J\000\u51A6\007Z\000\u048D\007\u0773\000\u2BA4\007\u215C\000\u012E\007\002\000;\007\225\000\007\007\f\000\005\007\005\000\001\007\001\b\n\007\001\000\r\007\001\000\005\007\001\000\001\007\001\000\002\007\001\000\002\007\001\000l\007!\000\u016B\007\022\000@\007\002\0006\007(\000\r\007\003\000\020\b\020\000\004\b\017\000\002\007\030\000\003\007\031\000\001\007\006\000\005\007\001\000\207\007\002\000\001\b\004\000\001\007\013\000\n\b\007\000\032\007\004\000\001\007\001\000\032\007\n\000Z\007\003\000\006\007\002\000\006\007\002\000\006\007\002\000\003\007\003\000\002\007\003\000\002\007\022\000\003\b\004\0");
    private static final int ZZ_ACTION[] = zzUnpackAction();
    private static final String ZZ_ACTION_PACKED_0 = "\002\000\003\001\002\002\001\003\002\004\001\002\r\003\001\002\001\001\001\005\001\006\002\007\001\001\001\b\001\t\002\000\002\004\001\000\001\002\003\003\001\n\n\003\001\013\004\t\001\000\002\004\001\000\001\004\013\003\001\t\001\000\001\004\003\003\001\n\001\003\004\t\001\004\002\003\002\000\001\004\001\003\001\t\003\004";
    private static final int ZZ_ROWMAP[] = zzUnpackRowMap();
    private static final String ZZ_ROWMAP_PACKED_0 = "\000\000\000)\000R\000{\000\244\000\315\000R\000\366\000\u011F\000\u0148\000\u0171\000\u019A\000\u01C3\000\u01EC\000\u0215\000\u023E\000\u0267\000\u0290\000\u02B9\000\u02E2\000\u030B\000\u0334\000\u035D\000\u0386\000\u03AF\000\u03AF\000R\000\u03D8\000\u0401\000R\000\u042A\000R\000\u0453\000\u047C\000\u04A5\000R\000\u04CE\000\u04F7\000\u0520\000\u0549\000\u0572\000\u059B\000\366\000\u05C4\000\u05ED\000\u0616\000\u063F\000\u0668\000\u0691\000\u06BA\000\u06E3\000\u070C\000\u0735\000R\000\u075E\000\u0787\000R\000\u07B0\000\u07D9\000\u04A5\000\u0802\000\u082B\000\u0854\000\u087D\000\u08A6\000\u08CF\000\u08F8\000\u0921\000\u094A\000\u0973\000\u099C\000\u09C5\000\u09EE\000\u0A17\000\u0A40\000\u0A69\000\u0A92\000\u0ABB\000\u0AE4\000\u0B0D\000\u0B36\000\u0B5F\000\u0B88\000\u0BB1\000\u0BDA\000\u0A69\000\u0C03\000\u0C2C\000\u0C55\000\u0BDA\000\u0C7E\000\u0CA7\000\u0CD0\000\u0CF9\000\u0D22\000\u0D4B\000\u0D74";
    private static final int ZZ_TRANS[] = zzUnpackTrans();
    private static final String ZZ_TRANS_PACKED_0 = "\001\003\001\004\001\003\001\005\001\006\002\007\001\b\001\003\001\t\001\n\003\b\001\013\001\b\001\007\001\003\001\f\001\r\001\016\001\017\001\020\001\021\001\b\001\022\001\023\001\b\001\024\001\025\001\026\001\b\001\027\002\b\001\030\001\007\001\031\001\032\001\031\001\033\001\034\001\035\001\036\016\034\001\037\026\034\001 +\000\001\003)\000\001\005)\000\001!\001\"*\000\007\b\001\000\001\b\002\000\022\b\016\000\002\n\001#\001\000\001$\001%\001&\007\000\001&\005\000\001$\024\000\002\n\002\000\001$\001%\001&\007\000\001&\005\000\001$\024\000\002%\003\000\001'!\000\007\b\001\000\001\b\002\000\001\b\001(\020\b\f\000\007\b\001\000\001\b\002\000\007\b\001)\002\b\001*\007\b\f\000\007\b\001\000\001\b\002\000\007\b\001+\n\b\f\000\007\b\001\000\001\b\002\000\004\b\001,\r\b\f\000\007\b\001\000\001\b\002\000\005\b\001-\f\b\f\000\007\b\001\000\001\b\002\000\001\b\001(\006\b\001.\t\b\f\000\007\b\001\000\001\b\002\000\004\b\001+\r\b\f\000\007\b\001\000\001\b\002\000\007\b\001/\n\b\f\000\007\b\001\000\001\b\002\000\001\b\001+\t\b\001+\006\b\f\000\007\b\001\000\001\b\002\000\0010\006\b\001\022\004\b\0011\005\b\f\000\007\b\001\000\001\b\002\000\001\b\0012\020\b\f\000\007\b\001\000\001\b\002\000\004\b\0013\013\b\0014\001\b\f\000\007\b\001\000\001\b\002\000\020\b\0015\001\b*\000\001\007\003\000\001\034\002\000\016\034\001\000\026\034\003\000\001\036&\000\0026\001\000&6\0017\0018\0019\0027\001:#7\005\000\001;,\000\001<\001=\001\000\002=\001\000\001=\002\000\001=\001\000\002=\001\000\001=\005\000\001=\001\000\001=\022\000\002%\002\000\001$\001\000\001&\007\000\001&\005\000\001$\017\000\001>\004\000\002?\005\000\001>&\000\001\007!\000\007\b\001\000\001\b\002\000\002\b\001+\017\b\f\000\007\b\001\000\001\b\002\000\016\b\001+\003\b\f\000\007\b\001\000\001\b\002\000\b\b\001+\t\b\f\000\007\b\001\000\001\b\002\000\005\b\001@\f\b\f\000\007\b\001\000\001\b\002\000\016\b\001A\001B\002\b\f\000\007\b\001\000\001\b\002\000\t\b\001C\b\b\f\000\007\b\001\000\001\b\002\000\r\b\001D\004\b\f\000\007\b\001\000\001\b\002\000\b\b\001E\t\b\f\000\007\b\001\000\001\b\002\000\001\b\001F\020\b\f\000\007\b\001\000\001\b\002\000\016\b\001G\003\b\f\000\007\b\001\000\001\b\002\000\f\b\001H\005\b\f\000\007\b\001\000\001\b\002\000\005\b\001I\f\b\f\000\007\b\001\000\001\b\002\000\n\b\001J\007\b\005\000\0017\0018\0019&7\002\000\0019&\000\0017\0018\0019\0027\001K#7\006\000\001L+\000\002M\001\000\002M\001\000\001M\002\000\001M\001\000\002M\001\000\001M\005\000\001M\001\000\001M\022\000\002?'\000\002?\002\000\001$\017\000\001$\022\000\007\b\001\000\001\b\002\000\001N\021\b\f\000\007\b\001\000\001\b\002\000\f\b\001O\005\b\f\000\007\b\001\000\001\b\002\000\005\b\001P\f\b\f\000\007\b\001\000\001\b\002\000\005\b\001Q\f\b\f\000\007\b\001\000\001\b\002\000\001*\021\b\f\000\007\b\001\000\001\b\002\000\t\b\001H\b\b\f\000\007\b\001\000\001\b\002\000\r\b\001R\004\b\f\000\007\b\001\000\001\b\002\000\n\b\001*\007\b\f\000\007\b\001\000\001\b\002\000\005\b\001+\f\b\f\000\007\b\001\000\001\b\002\000\001\b\001+\020\b\f\000\007\b\001\000\001\b\002\000\b\b\001H\t\b\005\000\001S\001T\001U\003S\0017\"S\006\000\001V+\000\002W\001\000\002W\001\000\001W\002\000\001W\001\000\002W\001\000\001W\005\000\001W\001\000\001W\020\000\007\b\001\000\001\b\002\000\006\b\001+\013\b\f\000\007\b\001\000\001\b\002\000\004\b\001I\r\b\f\000\007\b\001\000\001\b\002\000\001)\021\b\f\000\007\b\001\000\001\b\002\000\n\b\001X\007\b\f\000\007\b\001\000\001\b\002\000\016\b\001Y\003\b\005\000\001S\001T\001U\003S\001K\"S\002Z\001U\003Z\001[(Z\001[\"Z\t\000\002\\\001\000\002\\\001\000\001\\\002\000\001\\\001\000\002\\\001\000\001\\\005\000\001\\\001\000\001\\\020\000\007\b\001\000\001\b\002\000\013\b\001+\006\b\f\000\007\b\001\000\001\b\002\000\n\b\001]\007\b\005\000\006Z\001^\"Z\t\000\002_\001\000\002_\001\000\001_\002\000\001_\001\000\002_\001\000\001_\005\000\001_\001\000\001_\020\000\007\b\001\000\001\b\002\000\007\b\001I\n\b\013\000\0019+\000\002`\001\000\002`\001\000\001`\002\000\001`\001\000\002`\001\000\001`\005\000\001`\001\000\001`\022\000\002a\001\000\002a\001\000\001a\002\000\001a\001\000\002a\001\000\001a\005\000\001a\001\000\001a\022\000\002$\001\000\002$\001\000\001$\002\000\001$\001\000\002$\001\000\001$\005\000\001$\001\000\001$\t\0";
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final String ZZ_ERROR_MSG[] = {
        "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large"
    };
    private static final int ZZ_ATTRIBUTE[] = zzUnpackAttribute();
    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\002\000\001\t\003\001\001\t\023\001\001\t\002\001\001\t\001\001\001\t\001\001\002\000\001\t\001\001\001\000\017\001\001\t\002\001\001\t\001\001\001\000\002\001\001\000\r\001\001\000\r\001\002\000\006\001";
    private Reader zzReader;
    private int zzState;
    private int zzLexicalState;
    private char zzBuffer[];
    private int zzMarkedPos;
    private int zzCurrentPos;
    private int zzStartRead;
    private int zzEndRead;
    private int yyline;
    private int yychar;
    private int yycolumn;
    private boolean zzAtBOL;
    private boolean zzAtEOF;
    private boolean zzEOFDone;

}
