// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   TALLexer.java

package jsyntaxpane.lexers;

import java.io.*;
import jsyntaxpane.Token;
import jsyntaxpane.TokenType;

// Referenced classes of package jsyntaxpane.lexers:
//            DefaultJFlexLexer

public final class TALLexer extends DefaultJFlexLexer
{

    private static int[] zzUnpackAction()
    {
        int result[] = new int[167];
        int offset = 0;
        offset = zzUnpackAction("\001\000\003\001\002\002\001\003\002\004\002\003\001\001\004\003\002\001\002\003\005\002\001\000\003\005\004\000\003\003\002\004\001\003\001\006\005\003\004\000\003\003\002\000\003\004\001\000\003\003\001\004\001\003\001\007\004\003\001\b\001\000\003\003\002\000\001\004\001\000\002\003\001\007\001\004\001\003\001\000\b\003\002\000\001\004\001\000\001\003\001\004\001\003\001\000\005\003\001\000\001\006\001\004\001\000\001\003\001\004\001\003\001\000\001\003\001\006\001\000\001\004\001\000\001\004\001\003\001\007\001\003\001\000\001\004\001\000\001\004\002\003\001\004\001\000\001\004\001\003\001\004\001\000\001\004\001\003\002\000\001\004\001\003\002\000\001\004\001\003\002\000\001\004\001\003\002\000\001\004\001\003\002\000\001\004\001\003\002\000\001\003\002\000\001\003\002\000\001\004\003\0", offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while(--count > 0);
        }

        return j;
    }

    private static int[] zzUnpackRowMap()
    {
        int result[] = new int[167];
        int offset = 0;
        offset = zzUnpackRowMap("\000\000\000.\000\\\000\212\000\270\000\346\000\u0114\000\u0142\000\u0170\000\u019E\000\u01CC\000\u01FA\000\u0228\000\u0256\000\u0284\000\u02B2\000\u02E0\000\u030E\000\u033C\000\u036A\000\u0398\000.\000\u03C6\000\u03F4\000\u0422\000\270\000\u0450\000.\000\u047E\000\u04AC\000\u04DA\000\u0508\000\u0536\000\u0564\000\u0592\000\u05C0\000\u05EE\000\u061C\000\u064A\000\u0114\000\u0678\000\u06A6\000\u06D4\000\u0702\000\u0730\000\u075E\000\u078C\000\u07BA\000\u07E8\000\u0816\000\u0844\000\u0872\000\u08A0\000\u08CE\000.\000\u08FC\000\u092A\000\u0958\000\u0986\000\u09B4\000\u09E2\000\u0A10\000\u0A3E\000\u0A6C\000\u0A9A\000\u0AC8\000\u0AF6\000\u0B24\000.\000\u0B52\000\u0B80\000\u0BAE\000\u0BDC\000\u0C0A\000\u0C38\000\u0C66\000\u0C94\000\u0CC2\000\u0CF0\000\u0114\000\u0D1E\000\u0D4C\000\u0D7A\000\u0DA8\000\u0DD6\000\u0E04\000\u0E32\000\u0E60\000\u0E8E\000\u0EBC\000\u0EEA\000\u0F18\000\u0F46\000\u0F74\000\u0FA2\000\u0FD0\000\u0FFE\000\u102C\000\u105A\000\u1088\000\u10B6\000\u10E4\000\u1112\000\u1140\000\u116E\000.\000\u119C\000\u11CA\000\u11F8\000\u1226\000\u1254\000\u1282\000\u12B0\000\u12DE\000\u130C\000\u133A\000\u1368\000\u1396\000\u13C4\000.\000\u13F2\000\u1420\000\u144E\000\u147C\000\u14AA\000\u14D8\000\u1506\000\u1534\000\u1562\000\u1590\000\u15BE\000\u15EC\000\u161A\000\u1648\000\u1676\000\u16A4\000\u16D2\000\u1700\000\u172E\000\u175C\000\u178A\000\u17B8\000\u17E6\000\u1814\000\u1842\000\u1870\000\u189E\000\u18CC\000\u18FA\000\u1928\000\u1956\000\u1984\000\u19B2\000\u19E0\000\u1A0E\000\u1A3C\000\u1A6A\000\u1A98\000\u1AC6\000\u1AF4\000\u1B22\000\u1B50\000\u1B7E\000\u0114\000\u1BAC\000\u1BDA\000\u1C08", offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }

        return j;
    }

    private static int[] zzUnpackTrans()
    {
        int result[] = new int[7222];
        int offset = 0;
        offset = zzUnpackTrans("\001\002\001\003\001\002\001\004\001\005\001\006\001\007\001\002\001\b\001\t\001\007\001\n\001\013\001\f\003\t\001\r\001\016\001\007\001\017\005\007\001\020\001\021\001\022\001\002\001\023\002\007\001\t\001\007\001\024\001\025\001\007\002\026\001\007\002\026\001\027\001\030\001\0310\000\001\002.\000\001\004*\000\001\032\001\033\001\034\001\032\001\034)\032\005\000\001\035.\000\007\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\001\036\001\000\001\037\003\000\001 \001!\001 \020\000\001 \024\000\002\t\004\000\003\t\020\000\001\t\022\000\007\007\001\000\006\007\001\"\006\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\004\007\001#\b\007\003\000\006\007\001\000\001\007\002\000\001$\r\000\001%\005\000\002&\001%\020\000\001&\022\000\007\007\001\000\004\007\001'\b\007\003\000\004\007\001(\001\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\007\007\001)\005\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\007\007\001*\005\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\005\007\001+\001\007\001\000\006\007\001,\006\007\003\000\004\007\001-\001\007\001\000\001\007\002\000\001\007\005\000\001.\002\000\030.\001\000\001.\001\000\020.\001/\002\000\031/\002\000\f/\0010\002/\0011\006\000\007\007\001\000\b\007\0012\004\007\003\000\002\007\0013\003\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\r\007\003\000\002\007\0014\003\007\001\000\001\007\002\000\001\007#\000\0015\006\000\00163\000\001\026-\000\002\026+\000\001\026\005\000\001\034+\000\001\035\001\033\001\034+\035\b\000\001\036\002\000\0017\002\000\001 \001!\001 \020\000\001 \024\000\0018\0019\002\000\0019\001\000\0069\005\000\0029\006\000\0019\024\000\001:\002\000\0017\002\000\003:\020\000\001:\024\000\001 \002\000\0017\002\000\003 \020\000\001 \022\000\007\007\001\000\b\007\001;\004\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\t\007\001<\003\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\b\007\001=\004\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\001>\005\000\003>\020\000\001>\024\000\001%\005\000\003%\020\000\001%\022\000\007\007\001\000\005\007\001?\007\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\003\007\001(\t\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\b\007\001@\004\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\r\007\003\000\004\007\001A\001\007\001\000\001\007\002\000\001\007\013\000\004\007\001B\001C\001\007\001\000\004\007\001D\b\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\n\007\001(\002\007\003\000\006\007\001\000\001\007\002\000\001\007\005\000\001.\002\000\030.\001E\001.\001\000\020.\034\000\001E-\000\001E\020\000\001F\034\000\001E\r\000\001F\t\000\007\007\001\000\n\007\001G\002\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\013\007\001H\001\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\006\007\001I\006\007\003\000\006\007\001\000\001\007\002\000\001\007\027\000\001J4\000\001K\034\000\0018\0019\001\000\0017\0019\001\000\0069\005\000\0029\006\000\0019\024\000\002L\001\000\0017\001L\001\000\006L\005\000\002L\006\000\001L\024\000\001M\002\000\0017\002\000\003M\020\000\001M\022\000\007\007\001\000\004\007\001N\b\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\006\007\001O\006\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\004\007\001P\b\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\001Q\005\000\003Q\020\000\001Q\022\000\007\007\001\000\006\007\001R\006\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\r\007\003\000\006\007\001\000\001\007\001S\001\000\001\007\013\000\007\007\001\000\013\007\001T\001\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\004\007\001U\b\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\005\007\001V\001\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\005\007\001W\001\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007!\000\001\026\027\000\007\007\001\000\006\007\001X\006\007\003\000\001\007\001Y\004\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\n\007\001Z\002\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\005\007\001[\001\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007\030\000\001\\1\000\001]\036\000\002^\001\000\0017\001^\001\000\006^\005\000\002^\006\000\001^\024\000\001_\002\000\0017\002\000\003_\020\000\001_\022\000\007\007\001\000\n\007\001`\002\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\007\007\001(\005\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\001a\005\000\003a\020\000\001a\022\000\007\007\001\000\007\007\001b\005\007\003\000\006\007\001\000\001\007\002\000\001\007\023\000\001c%\000\007\007\001\000\b\007\001P\004\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\003\007\001P\t\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\004\007\001d\b\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\003\007\001e\t\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\007\007\001f\005\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\005\007\001g\007\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\004\007\001h\b\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\004\007\001(\b\007\003\000\006\007\001\000\001\007\002\000\001\007\033\000\001i)\000\001j#\000\002k\001\000\0017\001k\001\000\006k\005\000\002k\006\000\001k\024\000\001l\002\000\0017\002\000\003l\020\000\001l\022\000\007\007\001\000\013\007\001m\001\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\001n\005\000\003n\020\000\001n\022\000\007\007\001\000\b\007\001o\004\007\003\000\006\007\001\000\001\007\002\000\001\007&\000\001p\022\000\007\007\001\000\n\007\001P\002\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\013\007\001q\001\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\t\007\001P\003\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\b\007\001(\004\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\003\007\001r\t\007\003\000\006\007\001\000\001\007\002\000\001\007\031\000\001s!\000\002t\001\000\0017\001t\001\000\006t\005\000\002t\006\000\001t\024\000\001u\002\000\0017\002\000\003u\020\000\001u\022\000\005\007\001(\001\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\001v\005\000\003v\020\000\001v\022\000\007\007\001\000\004\007\001w\b\007\003\000\006\007\001\000\001\007\002\000\001\007,\000\001x\f\000\005\007\001y\001\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\r\007\003\000\003\007\001(\002\007\001\000\001\007\002\000\001\007'\000\001z\023\000\002{\001\000\0017\001{\001\000\006{\005\000\002{\006\000\001{\024\000\001|\002\000\0017\002\000\003|\020\000\001|\024\000\001}\005\000\003}\020\000\001}\022\000\007\007\001\000\t\007\001~\003\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\006\007\001\177\006\007\003\000\006\007\001\000\001\007\002\000\001\007\032\000\001j \000\002\200\001\000\0017\001\200\001\000\006\200\005\000\002\200\006\000\001\200\024\000\001\201\002\000\0017\002\000\003\201\020\000\001\201\024\000\001\202\005\000\003\202\020\000\001\202\022\000\007\007\001\000\004\007\001\203\b\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\t\007\001O\003\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\204\001\000\0017\001\204\001\000\006\204\005\000\002\204\006\000\001\204\024\000\001\205\002\000\0017\002\000\003\205\020\000\001\205\024\000\001\206\005\000\003\206\020\000\001\206\022\000\007\007\001\000\n\007\001\207\002\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\210\001\000\0017\001\210\001\000\006\210\005\000\002\210\006\000\001\210\024\000\001\211\002\000\0017\002\000\003\211\020\000\001\211\024\000\001\212\005\000\003\212\020\000\001\212\022\000\005\007\001\213\001\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\214\001\000\0017\001\214\001\000\006\214\005\000\002\214\006\000\001\214\024\000\001\215\002\000\0017\002\000\003\215\020\000\001\215\024\000\001\216\005\000\003\216\020\000\001\216\022\000\007\007\001\000\006\007\001\217\006\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\220\001\000\0017\001\220\001\000\006\220\005\000\002\220\006\000\001\220\024\000\001\221\002\000\0017\002\000\003\221\020\000\001\221\024\000\001\222\005\000\003\222\020\000\001\222\022\000\007\007\001\000\b\007\001\223\004\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\224\001\000\0017\001\224\001\000\006\224\005\000\002\224\006\000\001\224\024\000\001\225\002\000\0017\002\000\003\225\020\000\001\225\024\000\001\226\005\000\003\226\020\000\001\226\022\000\007\007\001\000\004\007\001\227\b\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\230\001\000\0017\001\230\001\000\006\230\005\000\002\230\006\000\001\230\024\000\001\231\002\000\0017\002\000\003\231\020\000\001\231\024\000\001\232\005\000\003\232\020\000\001\232\022\000\007\007\001\000\n\007\001\233\002\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\234\001\000\0017\001\234\001\000\006\234\005\000\002\234\006\000\001\234\024\000\001\235\002\000\0017\002\000\003\235\020\000\001\235\024\000\0017\005\000\0037\020\000\0017\022\000\007\007\001\000\013\007\001\236\001\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\237\001\000\0017\001\237\001\000\006\237\005\000\002\237\006\000\001\237\024\000\001\240\002\000\0017\002\000\003\240\020\000\001\240\022\000\005\007\001\241\001\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\242\001\000\0017\001\242\001\000\006\242\005\000\002\242\006\000\001\242\024\000\001\243\002\000\0017\002\000\003\243\020\000\001\243\022\000\007\007\001\000\003\007\001\244\b\007\001\244\003\000\006\007\001\000\001\007\002\000\001\007\020\000\0017*\000\001\245\002\000\0017\002\000\003\245\020\000\001\245\024\000\001\246\002\000\0017\002\000\003\246\020\000\001\246\024\000\001\247\002\000\0017\002\000\003\247\020\000\001\247\024\000\001\242\002\000\0017\002\000\003\242\020\000\001\242\f\0", offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do
                result[j++] = value;
            while(--count > 0);
        }

        return j;
    }

    private static int[] zzUnpackAttribute()
    {
        int result[] = new int[167];
        int offset = 0;
        offset = zzUnpackAttribute("\001\000\001\t\023\001\001\t\003\001\001\000\001\001\001\t\001\001\004\000\f\001\004\000\003\001\002\000\001\t\002\001\001\000\n\001\001\t\001\000\003\001\002\000\001\001\001\000\005\001\001\000\b\001\002\000\001\001\001\000\003\001\001\000\005\001\001\000\001\t\001\001\001\000\003\001\001\000\002\001\001\000\001\001\001\000\002\001\001\t\001\001\001\000\001\001\001\000\004\001\001\000\003\001\001\000\002\001\002\000\002\001\002\000\002\001\002\000\002\001\002\000\002\001\002\000\002\001\002\000\001\001\002\000\001\001\002\000\001\001\003\0", offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while(--count > 0);
        }

        return j;
    }

    public TALLexer()
    {
        zzLexicalState = 0;
        zzBuffer = new char[16384];
        zzAtBOL = true;
    }

    public int yychar()
    {
        return yychar;
    }

    public TALLexer(Reader in)
    {
        zzLexicalState = 0;
        zzBuffer = new char[16384];
        zzAtBOL = true;
        zzReader = in;
    }

    public TALLexer(InputStream in)
    {
        this(((Reader) (new InputStreamReader(in))));
    }

    private static char[] zzUnpackCMap(String packed)
    {
        char map[] = new char[0x10000];
        int i = 0;
        int j = 0;
        while(i < 190) 
        {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do
                map[j++] = value;
            while(--count > 0);
        }
        return map;
    }

    private boolean zzRefill()
        throws IOException
    {
        if(zzStartRead > 0)
        {
            System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }
        if(zzCurrentPos >= zzBuffer.length)
        {
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }
        int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);
        if(numRead > 0)
        {
            zzEndRead += numRead;
            return false;
        }
        if(numRead == 0)
        {
            int c = zzReader.read();
            if(c == -1)
            {
                return true;
            } else
            {
                zzBuffer[zzEndRead++] = (char)c;
                return false;
            }
        } else
        {
            return true;
        }
    }

    public final void yyclose()
        throws IOException
    {
        zzAtEOF = true;
        zzEndRead = zzStartRead;
        if(zzReader != null)
            zzReader.close();
    }

    public final void yyreset(Reader reader)
    {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = 0;
    }

    public final int yystate()
    {
        return zzLexicalState;
    }

    public final void yybegin(int newState)
    {
        zzLexicalState = newState;
    }

    public final String yytext()
    {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    public final char yycharat(int pos)
    {
        return zzBuffer[zzStartRead + pos];
    }

    public final int yylength()
    {
        return zzMarkedPos - zzStartRead;
    }

    private void zzScanError(int errorCode)
    {
        String message;
        try
        {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch(ArrayIndexOutOfBoundsException e)
        {
            message = ZZ_ERROR_MSG[0];
        }
        throw new Error(message);
    }

    public void yypushback(int number)
    {
        if(number > yylength())
            zzScanError(2);
        zzMarkedPos -= number;
    }

    public Token yylex()
        throws IOException
    {
        int zzEndReadL = zzEndRead;
        char zzBufferL[] = zzBuffer;
        char zzCMapL[] = ZZ_CMAP;
        int zzTransL[] = ZZ_TRANS;
        int zzRowMapL[] = ZZ_ROWMAP;
        int zzAttrL[] = ZZ_ATTRIBUTE;
        do
        {
            int zzMarkedPosL = zzMarkedPos;
            yychar += zzMarkedPosL - zzStartRead;
            int zzAction = -1;
            int zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
            zzState = ZZ_LEXSTATE[zzLexicalState];
            int zzInput;
            int zzAttributes;
label0:
            do
            {
                do
                {
                    if(zzCurrentPosL < zzEndReadL)
                    {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    } else
                    {
                        if(zzAtEOF)
                        {
                            zzInput = -1;
                            break label0;
                        }
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if(eof)
                        {
                            zzInput = -1;
                            break label0;
                        }
                        zzInput = zzBufferL[zzCurrentPosL++];
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if(zzNext == -1)
                        break label0;
                    zzState = zzNext;
                    zzAttributes = zzAttrL[zzState];
                } while((zzAttributes & 1) != 1);
                zzAction = zzState;
                zzMarkedPosL = zzCurrentPosL;
            } while((zzAttributes & 8) != 8);
            zzMarkedPos = zzMarkedPosL;
            switch(zzAction >= 0 ? ZZ_ACTION[zzAction] : zzAction)
            {
            case 8: // '\b'
                return token(TokenType.STRING);

            case 6: // '\006'
                return token(TokenType.KEYWORD);

            case 7: // '\007'
                return token(TokenType.TYPE);

            case 2: // '\002'
                return token(TokenType.OPERATOR);

            case 4: // '\004'
                return token(TokenType.NUMBER);

            case 3: // '\003'
                return token(TokenType.IDENTIFIER);

            case 5: // '\005'
                return token(TokenType.COMMENT);

            default:
                if(zzInput == -1 && zzStartRead == zzCurrentPos)
                {
                    zzAtEOF = true;
                    return null;
                }
                zzScanError(1);
                break;

            case 1: // '\001'
            case 9: // '\t'
            case 10: // '\n'
            case 11: // '\013'
            case 12: // '\f'
            case 13: // '\r'
            case 14: // '\016'
            case 15: // '\017'
            case 16: // '\020'
                break;
            }
        } while(true);
    }

    public static final int YYEOF = -1;
    private static final int ZZ_BUFFERSIZE = 16384;
    public static final int YYINITIAL = 0;
    private static final int ZZ_LEXSTATE[] = {
        0, 0
    };
    private static final String ZZ_CMAP_PACKED = "\t\000\001\003\001\002\001\000\001\003\001\001\022\000\001\003\001\004\001\033\002\000\001\r\001\000\001\034\001&\001'\001)\001)\001)\001\005\001)\001)\001\b\001\017\001!\001\016\004\020\002\t\001-\001)\001,\001*\001+\001$\001\000\001\031\001\f\001\023\001\021\001\022\001\032\001\027\001 \001\024\002\006\001\013\001\006\001\025\001\"\001%\001\006\001\030\001\036\001\026\001\037\001\006\001#\001\n\001(\001\006\001)\001\035\001)\001\007\001\006\001\000\001\031\001\f\001\023\001\021\001\022\001\032\001\027\001 \001\024\002\006\001\013\001\006\001\025\001\"\001%\001\006\001\030\001\036\001\026\001\037\001\006\001#\001\n\001(\001\006\001)\001\000\001)\uFF82\0";
    private static final char ZZ_CMAP[] = zzUnpackCMap("\t\000\001\003\001\002\001\000\001\003\001\001\022\000\001\003\001\004\001\033\002\000\001\r\001\000\001\034\001&\001'\001)\001)\001)\001\005\001)\001)\001\b\001\017\001!\001\016\004\020\002\t\001-\001)\001,\001*\001+\001$\001\000\001\031\001\f\001\023\001\021\001\022\001\032\001\027\001 \001\024\002\006\001\013\001\006\001\025\001\"\001%\001\006\001\030\001\036\001\026\001\037\001\006\001#\001\n\001(\001\006\001)\001\035\001)\001\007\001\006\001\000\001\031\001\f\001\023\001\021\001\022\001\032\001\027\001 \001\024\002\006\001\013\001\006\001\025\001\"\001%\001\006\001\030\001\036\001\026\001\037\001\006\001#\001\n\001(\001\006\001)\001\000\001)\uFF82\0");
    private static final int ZZ_ACTION[] = zzUnpackAction();
    private static final String ZZ_ACTION_PACKED_0 = "\001\000\003\001\002\002\001\003\002\004\002\003\001\001\004\003\002\001\002\003\005\002\001\000\003\005\004\000\003\003\002\004\001\003\001\006\005\003\004\000\003\003\002\000\003\004\001\000\003\003\001\004\001\003\001\007\004\003\001\b\001\000\003\003\002\000\001\004\001\000\002\003\001\007\001\004\001\003\001\000\b\003\002\000\001\004\001\000\001\003\001\004\001\003\001\000\005\003\001\000\001\006\001\004\001\000\001\003\001\004\001\003\001\000\001\003\001\006\001\000\001\004\001\000\001\004\001\003\001\007\001\003\001\000\001\004\001\000\001\004\002\003\001\004\001\000\001\004\001\003\001\004\001\000\001\004\001\003\002\000\001\004\001\003\002\000\001\004\001\003\002\000\001\004\001\003\002\000\001\004\001\003\002\000\001\004\001\003\002\000\001\003\002\000\001\003\002\000\001\004\003\0";
    private static final int ZZ_ROWMAP[] = zzUnpackRowMap();
    private static final String ZZ_ROWMAP_PACKED_0 = "\000\000\000.\000\\\000\212\000\270\000\346\000\u0114\000\u0142\000\u0170\000\u019E\000\u01CC\000\u01FA\000\u0228\000\u0256\000\u0284\000\u02B2\000\u02E0\000\u030E\000\u033C\000\u036A\000\u0398\000.\000\u03C6\000\u03F4\000\u0422\000\270\000\u0450\000.\000\u047E\000\u04AC\000\u04DA\000\u0508\000\u0536\000\u0564\000\u0592\000\u05C0\000\u05EE\000\u061C\000\u064A\000\u0114\000\u0678\000\u06A6\000\u06D4\000\u0702\000\u0730\000\u075E\000\u078C\000\u07BA\000\u07E8\000\u0816\000\u0844\000\u0872\000\u08A0\000\u08CE\000.\000\u08FC\000\u092A\000\u0958\000\u0986\000\u09B4\000\u09E2\000\u0A10\000\u0A3E\000\u0A6C\000\u0A9A\000\u0AC8\000\u0AF6\000\u0B24\000.\000\u0B52\000\u0B80\000\u0BAE\000\u0BDC\000\u0C0A\000\u0C38\000\u0C66\000\u0C94\000\u0CC2\000\u0CF0\000\u0114\000\u0D1E\000\u0D4C\000\u0D7A\000\u0DA8\000\u0DD6\000\u0E04\000\u0E32\000\u0E60\000\u0E8E\000\u0EBC\000\u0EEA\000\u0F18\000\u0F46\000\u0F74\000\u0FA2\000\u0FD0\000\u0FFE\000\u102C\000\u105A\000\u1088\000\u10B6\000\u10E4\000\u1112\000\u1140\000\u116E\000.\000\u119C\000\u11CA\000\u11F8\000\u1226\000\u1254\000\u1282\000\u12B0\000\u12DE\000\u130C\000\u133A\000\u1368\000\u1396\000\u13C4\000.\000\u13F2\000\u1420\000\u144E\000\u147C\000\u14AA\000\u14D8\000\u1506\000\u1534\000\u1562\000\u1590\000\u15BE\000\u15EC\000\u161A\000\u1648\000\u1676\000\u16A4\000\u16D2\000\u1700\000\u172E\000\u175C\000\u178A\000\u17B8\000\u17E6\000\u1814\000\u1842\000\u1870\000\u189E\000\u18CC\000\u18FA\000\u1928\000\u1956\000\u1984\000\u19B2\000\u19E0\000\u1A0E\000\u1A3C\000\u1A6A\000\u1A98\000\u1AC6\000\u1AF4\000\u1B22\000\u1B50\000\u1B7E\000\u0114\000\u1BAC\000\u1BDA\000\u1C08";
    private static final int ZZ_TRANS[] = zzUnpackTrans();
    private static final String ZZ_TRANS_PACKED_0 = "\001\002\001\003\001\002\001\004\001\005\001\006\001\007\001\002\001\b\001\t\001\007\001\n\001\013\001\f\003\t\001\r\001\016\001\007\001\017\005\007\001\020\001\021\001\022\001\002\001\023\002\007\001\t\001\007\001\024\001\025\001\007\002\026\001\007\002\026\001\027\001\030\001\0310\000\001\002.\000\001\004*\000\001\032\001\033\001\034\001\032\001\034)\032\005\000\001\035.\000\007\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\001\036\001\000\001\037\003\000\001 \001!\001 \020\000\001 \024\000\002\t\004\000\003\t\020\000\001\t\022\000\007\007\001\000\006\007\001\"\006\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\004\007\001#\b\007\003\000\006\007\001\000\001\007\002\000\001$\r\000\001%\005\000\002&\001%\020\000\001&\022\000\007\007\001\000\004\007\001'\b\007\003\000\004\007\001(\001\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\007\007\001)\005\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\007\007\001*\005\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\005\007\001+\001\007\001\000\006\007\001,\006\007\003\000\004\007\001-\001\007\001\000\001\007\002\000\001\007\005\000\001.\002\000\030.\001\000\001.\001\000\020.\001/\002\000\031/\002\000\f/\0010\002/\0011\006\000\007\007\001\000\b\007\0012\004\007\003\000\002\007\0013\003\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\r\007\003\000\002\007\0014\003\007\001\000\001\007\002\000\001\007#\000\0015\006\000\00163\000\001\026-\000\002\026+\000\001\026\005\000\001\034+\000\001\035\001\033\001\034+\035\b\000\001\036\002\000\0017\002\000\001 \001!\001 \020\000\001 \024\000\0018\0019\002\000\0019\001\000\0069\005\000\0029\006\000\0019\024\000\001:\002\000\0017\002\000\003:\020\000\001:\024\000\001 \002\000\0017\002\000\003 \020\000\001 \022\000\007\007\001\000\b\007\001;\004\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\t\007\001<\003\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\b\007\001=\004\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\001>\005\000\003>\020\000\001>\024\000\001%\005\000\003%\020\000\001%\022\000\007\007\001\000\005\007\001?\007\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\003\007\001(\t\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\b\007\001@\004\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\r\007\003\000\004\007\001A\001\007\001\000\001\007\002\000\001\007\013\000\004\007\001B\001C\001\007\001\000\004\007\001D\b\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\n\007\001(\002\007\003\000\006\007\001\000\001\007\002\000\001\007\005\000\001.\002\000\030.\001E\001.\001\000\020.\034\000\001E-\000\001E\020\000\001F\034\000\001E\r\000\001F\t\000\007\007\001\000\n\007\001G\002\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\013\007\001H\001\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\006\007\001I\006\007\003\000\006\007\001\000\001\007\002\000\001\007\027\000\001J4\000\001K\034\000\0018\0019\001\000\0017\0019\001\000\0069\005\000\0029\006\000\0019\024\000\002L\001\000\0017\001L\001\000\006L\005\000\002L\006\000\001L\024\000\001M\002\000\0017\002\000\003M\020\000\001M\022\000\007\007\001\000\004\007\001N\b\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\006\007\001O\006\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\004\007\001P\b\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\001Q\005\000\003Q\020\000\001Q\022\000\007\007\001\000\006\007\001R\006\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\r\007\003\000\006\007\001\000\001\007\001S\001\000\001\007\013\000\007\007\001\000\013\007\001T\001\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\004\007\001U\b\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\005\007\001V\001\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\005\007\001W\001\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007!\000\001\026\027\000\007\007\001\000\006\007\001X\006\007\003\000\001\007\001Y\004\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\n\007\001Z\002\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\005\007\001[\001\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007\030\000\001\\1\000\001]\036\000\002^\001\000\0017\001^\001\000\006^\005\000\002^\006\000\001^\024\000\001_\002\000\0017\002\000\003_\020\000\001_\022\000\007\007\001\000\n\007\001`\002\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\007\007\001(\005\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\001a\005\000\003a\020\000\001a\022\000\007\007\001\000\007\007\001b\005\007\003\000\006\007\001\000\001\007\002\000\001\007\023\000\001c%\000\007\007\001\000\b\007\001P\004\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\003\007\001P\t\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\004\007\001d\b\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\003\007\001e\t\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\007\007\001f\005\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\005\007\001g\007\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\004\007\001h\b\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\004\007\001(\b\007\003\000\006\007\001\000\001\007\002\000\001\007\033\000\001i)\000\001j#\000\002k\001\000\0017\001k\001\000\006k\005\000\002k\006\000\001k\024\000\001l\002\000\0017\002\000\003l\020\000\001l\022\000\007\007\001\000\013\007\001m\001\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\001n\005\000\003n\020\000\001n\022\000\007\007\001\000\b\007\001o\004\007\003\000\006\007\001\000\001\007\002\000\001\007&\000\001p\022\000\007\007\001\000\n\007\001P\002\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\013\007\001q\001\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\t\007\001P\003\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\b\007\001(\004\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\003\007\001r\t\007\003\000\006\007\001\000\001\007\002\000\001\007\031\000\001s!\000\002t\001\000\0017\001t\001\000\006t\005\000\002t\006\000\001t\024\000\001u\002\000\0017\002\000\003u\020\000\001u\022\000\005\007\001(\001\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\001v\005\000\003v\020\000\001v\022\000\007\007\001\000\004\007\001w\b\007\003\000\006\007\001\000\001\007\002\000\001\007,\000\001x\f\000\005\007\001y\001\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\r\007\003\000\003\007\001(\002\007\001\000\001\007\002\000\001\007'\000\001z\023\000\002{\001\000\0017\001{\001\000\006{\005\000\002{\006\000\001{\024\000\001|\002\000\0017\002\000\003|\020\000\001|\024\000\001}\005\000\003}\020\000\001}\022\000\007\007\001\000\t\007\001~\003\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\006\007\001\177\006\007\003\000\006\007\001\000\001\007\002\000\001\007\032\000\001j \000\002\200\001\000\0017\001\200\001\000\006\200\005\000\002\200\006\000\001\200\024\000\001\201\002\000\0017\002\000\003\201\020\000\001\201\024\000\001\202\005\000\003\202\020\000\001\202\022\000\007\007\001\000\004\007\001\203\b\007\003\000\006\007\001\000\001\007\002\000\001\007\013\000\007\007\001\000\t\007\001O\003\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\204\001\000\0017\001\204\001\000\006\204\005\000\002\204\006\000\001\204\024\000\001\205\002\000\0017\002\000\003\205\020\000\001\205\024\000\001\206\005\000\003\206\020\000\001\206\022\000\007\007\001\000\n\007\001\207\002\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\210\001\000\0017\001\210\001\000\006\210\005\000\002\210\006\000\001\210\024\000\001\211\002\000\0017\002\000\003\211\020\000\001\211\024\000\001\212\005\000\003\212\020\000\001\212\022\000\005\007\001\213\001\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\214\001\000\0017\001\214\001\000\006\214\005\000\002\214\006\000\001\214\024\000\001\215\002\000\0017\002\000\003\215\020\000\001\215\024\000\001\216\005\000\003\216\020\000\001\216\022\000\007\007\001\000\006\007\001\217\006\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\220\001\000\0017\001\220\001\000\006\220\005\000\002\220\006\000\001\220\024\000\001\221\002\000\0017\002\000\003\221\020\000\001\221\024\000\001\222\005\000\003\222\020\000\001\222\022\000\007\007\001\000\b\007\001\223\004\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\224\001\000\0017\001\224\001\000\006\224\005\000\002\224\006\000\001\224\024\000\001\225\002\000\0017\002\000\003\225\020\000\001\225\024\000\001\226\005\000\003\226\020\000\001\226\022\000\007\007\001\000\004\007\001\227\b\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\230\001\000\0017\001\230\001\000\006\230\005\000\002\230\006\000\001\230\024\000\001\231\002\000\0017\002\000\003\231\020\000\001\231\024\000\001\232\005\000\003\232\020\000\001\232\022\000\007\007\001\000\n\007\001\233\002\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\234\001\000\0017\001\234\001\000\006\234\005\000\002\234\006\000\001\234\024\000\001\235\002\000\0017\002\000\003\235\020\000\001\235\024\000\0017\005\000\0037\020\000\0017\022\000\007\007\001\000\013\007\001\236\001\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\237\001\000\0017\001\237\001\000\006\237\005\000\002\237\006\000\001\237\024\000\001\240\002\000\0017\002\000\003\240\020\000\001\240\022\000\005\007\001\241\001\007\001\000\r\007\003\000\006\007\001\000\001\007\002\000\001\007\r\000\002\242\001\000\0017\001\242\001\000\006\242\005\000\002\242\006\000\001\242\024\000\001\243\002\000\0017\002\000\003\243\020\000\001\243\022\000\007\007\001\000\003\007\001\244\b\007\001\244\003\000\006\007\001\000\001\007\002\000\001\007\020\000\0017*\000\001\245\002\000\0017\002\000\003\245\020\000\001\245\024\000\001\246\002\000\0017\002\000\003\246\020\000\001\246\024\000\001\247\002\000\0017\002\000\003\247\020\000\001\247\024\000\001\242\002\000\0017\002\000\003\242\020\000\001\242\f\0";
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final String ZZ_ERROR_MSG[] = {
        "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large"
    };
    private static final int ZZ_ATTRIBUTE[] = zzUnpackAttribute();
    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\001\000\001\t\023\001\001\t\003\001\001\000\001\001\001\t\001\001\004\000\f\001\004\000\003\001\002\000\001\t\002\001\001\000\n\001\001\t\001\000\003\001\002\000\001\001\001\000\005\001\001\000\b\001\002\000\001\001\001\000\003\001\001\000\005\001\001\000\001\t\001\001\001\000\003\001\001\000\002\001\001\000\001\001\001\000\002\001\001\t\001\001\001\000\001\001\001\000\004\001\001\000\003\001\001\000\002\001\002\000\002\001\002\000\002\001\002\000\002\001\002\000\002\001\002\000\002\001\002\000\001\001\002\000\001\001\002\000\001\001\003\0";
    private Reader zzReader;
    private int zzState;
    private int zzLexicalState;
    private char zzBuffer[];
    private int zzMarkedPos;
    private int zzCurrentPos;
    private int zzStartRead;
    private int zzEndRead;
    private int yyline;
    private int yychar;
    private int yycolumn;
    private boolean zzAtBOL;
    private boolean zzAtEOF;
    private boolean zzEOFDone;

}
