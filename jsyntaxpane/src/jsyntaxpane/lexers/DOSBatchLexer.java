// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   DOSBatchLexer.java

package jsyntaxpane.lexers;

import java.io.*;
import jsyntaxpane.Token;
import jsyntaxpane.TokenType;

// Referenced classes of package jsyntaxpane.lexers:
//            DefaultJFlexLexer

public final class DOSBatchLexer extends DefaultJFlexLexer
{

    private static int[] zzUnpackAction()
    {
        int result[] = new int[164];
        int offset = 0;
        offset = zzUnpackAction("\001\000\001\001\001\002\003\003\001\002\001\004\r\003\001\002\003\003\001\002\002\001\001\005\001\001\002\003\001\004\020\003\001\004\025\003\001\000\001\006\003\003\001\007\001\001\001\006\001\004\003\003\001\004\025\003\001\004\001\003\001\004\t\003\001\004\001\b\002\003\001\b\001\t\001\003\002\t\006\003\001\n\002\003\001\004\007\003\001\004\024\003", offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while(--count > 0);
        }

        return j;
    }

    private static int[] zzUnpackRowMap()
    {
        int result[] = new int[164];
        int offset = 0;
        offset = zzUnpackRowMap("\000\000\000\"\000D\000f\000\210\000\252\000\314\000D\000\356\000\u0110\000\u0132\000\u0154\000\u0176\000\u0198\000\u01BA\000\u01DC\000\u01FE\000\u0220\000\u0242\000\u0264\000\u0286\000\u02A8\000\u02CA\000\u02EC\000\u030E\000\u0330\000\u0352\000\u0374\000D\000\u0396\000\u03B8\000\u03DA\000\u0110\000\u03FC\000\u041E\000\u0440\000\u0462\000\u0484\000\u04A6\000\u04C8\000\u04EA\000\u050C\000\u052E\000\u0550\000\u0572\000\u0594\000\u05B6\000\u05D8\000\u05FA\000\u061C\000\u063E\000\u0660\000\u0682\000\u06A4\000\u06C6\000\u06E8\000\u070A\000\u072C\000\u074E\000\u0770\000\u0792\000\u07B4\000\u07D6\000\u07F8\000\u081A\000\u083C\000\u085E\000\u0880\000\u08A2\000\u08C4\000\u08E6\000\u0908\000\u092A\000\u094C\000\u096E\000\u0990\000\u09B2\000\u09D4\000\u09F6\000\u0A18\000\u0A3A\000\u0A5C\000\u0A7E\000\u0AA0\000\u0AC2\000\u0AE4\000\u0B06\000\u0B28\000\u0B4A\000\u0B6C\000\u0B8E\000\u0BB0\000\u0BD2\000\u0BF4\000\u0C16\000\u0C38\000\u0C5A\000\u0C7C\000\u0C9E\000\u0CC0\000\u0CE2\000\u0D04\000\u0D26\000\u0D48\000\u0D6A\000\u0D8C\000\u0DAE\000\u0B6C\000\u0DD0\000\u0DF2\000\u0E14\000\u0E36\000\u0E58\000\u0E7A\000\u0E9C\000\u0EBE\000\u0EE0\000\u0F02\000D\000\u0F24\000\u0F46\000\u0352\000\u0F68\000\u0A18\000\u0F8A\000D\000\u0FAC\000\u0FCE\000\u0FF0\000\u1012\000\u1034\000\u1056\000\u0110\000\u1078\000\u109A\000\u10BC\000\u10DE\000\u1100\000\u1122\000\u1144\000\u1166\000\u1188\000\u11AA\000\u11CC\000\u11EE\000\u1210\000\u1232\000\u1254\000\u1276\000\u1298\000\u12BA\000\u12DC\000\u12FE\000\u1320\000\u1342\000\u1364\000\u1386\000\u13A8\000\u13CA\000\u13EC\000\u140E\000\u1430\000\u1452\000\u1474", offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }

        return j;
    }

    private static int[] zzUnpackTrans()
    {
        int result[] = new int[5270];
        int offset = 0;
        offset = zzUnpackTrans("\001\003\001\004\001\005\001\006\001\007\001\003\001\b\001\t\001\n\001\013\001\f\001\r\001\016\001\017\001\020\001\021\001\022\001\023\001\n\001\024\001\025\001\026\003\n\001\027\001\n\001\030\001\031\001\n\001\032\003\n\004\033\001\034\001\035\017\033\001\036\f\033#\000\001\n\001\037\001 \003\000\f\n\001!\001\n\001\000\b\n\001\000\003\n\001\000\001\"\002\n\003\000\003\n\001#\001\n\001$\001%\007\n\001\000\004\n\001&\003\n\001\000\003\n\001\000\003\n\003\000\001\n\001'\n\n\001!\001\n\001\000\006\n\001 \001\n\001\000\003\n\005\000\001\003\035\000\001(\002\n\003\000\001\n\001)\f\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\001*\002\n\003\000\007\n\001+\003\n\001,\002\n\001\000\b\n\001\000\003\n\001\000\002\n\001-\003\000\001\n\001.\002\n\001/\0010\006\n\001!\001\n\001\000\003\n\0011\004\n\001\000\003\n\001\000\003\n\003\000\002\n\0012\006\n\0013\0014\003\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\0015\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\003\n\0016\n\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\b\n\001!\005\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\0017\0018\001!\003\n\0019\006\n\001\000\b\n\001\000\003\n\001\000\001\n\001:\001\n\003\000\001\n\001;\001<\013\n\001\000\003\n\001=\003\n\001>\001\000\003\n\001\000\001?\002\n\003\000\001\n\001@\002\n\001A\t\n\001\000\007\n\001B\001\000\003\n\001\000\001\n\001C\001\n\003\000\001\n\001D\002\n\001E\002\n\001F\006\n\001\000\b\n\001\000\003\n\001\000\001\n\001G\001\n\003\000\001\n\001C\f\n\001\000\b\n\001\000\003\n\001\000\003H\003\000\016H\001\000\001H\001\000\001I\005H\001\000\002H\001I\001\000\001\n\001J\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\001K\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\001\n\001L\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003M\003\000\016M\004\000\005M\001\000\001M\002\000\005\033\001\000!\033\001\035\035\033\003N\001\033\001\000\001\033\016N\001\033\001N\001\033\001O\005N\001\033\002N\001O\001\000\002\n\001P\003\000\003\n\001Q\005\n\001R\001S\003\n\001\000\004\n\001T\003\n\001\000\003\n\001\000\003\n\003\000\f\n\001U\001\n\001\000\b\n\001\000\003\n\001\000\001V\002\n\003\000\004\n\001$\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\003\n\001W\004\n\001\000\003\n\001\000\003\n\003\000\t\n\001X\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\007\n\001Y\006\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\f\n\001Z\001\n\001\000\b\n\001\000\003\n\001\000\001X\002\n\003\000\f\n\002X\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001[\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001\\\013\n\001\000\b\n\001\000\003\n\001\000\001\n\001X\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\002\n\001X\003\000\002\n\001]\013\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\n\n\001X\003\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\f\n\001!\001\n\001\000\b\n\001\000\003\n\001\000\002\n\001^\003\000\005\n\001_\004\n\001`\003\n\001\000\004\n\001a\003\n\001\000\003\n\001\000\003\n\003\000\003\n\001b\001\n\001C\b\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\t\n\001!\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\003\n\001c\b\n\001U\001\n\001\000\006\n\001d\001\n\001\000\003\n\001\000\003\n\003\000\002\n\001e\013\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\t\n\001f\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\n\n\001g\003\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\005\n\001h\002\n\001\000\003\n\001\000\003\n\003\000\001\n\001i\f\n\001\000\b\n\001\000\003\n\001\000\001j\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\013\n\001,\002\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\004\n\001k\003\n\001\000\003\n\001\000\003\n\003\000\002\n\001l\013\n\001\000\b\n\001\000\003\n\001\000\001m\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001;\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\007\n\001n\006\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\005\n\001o\002\n\001\000\003\n\001\000\003\n\003\000\001\n\001p\005\n\001q\006\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\n\n\001-\003\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001r\013\n\001\000\007\n\001$\001\000\003\n\001\000\003\n\003\000\t\n\001s\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\005\n\001!\b\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\t\n\001t\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001X\013\n\001\000\b\n\001\000\003\n\001\000\001!\002\n\003\000\t\n\001u\004\n\001\000\b\n\001\000\003\n\001\000\001v\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003H\003\000\016H\001w\bH\001\000\003H\030\000\001I\b\000\001I\001\000\003\n\003\000\005\n\001c\b\n\001\000\b\n\001\000\003\n\001\000\001\n\001x\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\013\n\001y\002\n\001\000\b\n\001\000\003\n\001\000\003M\003\000\016M\004\000\005M\001\000\003M\001\033\003N\001\033\001\000\001\033\016N\001z\bN\001\033\003N\005\033\001\000\022\033\001O\b\033\001O\001{\003|\001}\001~\001{\016|\001{\b|\001{\003|\001\000\003\n\003\000\001\n\001\177\f\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001\200\013\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\005\n\001\201\b\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001\202\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\007\n\001\203\006\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001\204\f\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001\205\f\n\001\000\b\n\001\000\003\n\001\000\001\n\001!\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001!\006\n\001m\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\005\n\001\206\b\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\b\n\001\207\005\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001!\f\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\005\n\001X\b\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\n\n\001\210\003\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001\203\f\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\013\n\001!\002\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\r\n\001\211\001\000\b\n\001\000\003\n\001\000\003\n\003\000\005\n\0010\b\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\n\n\001!\003\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\f\n\001\212\001\n\001\000\004\n\001\213\003\n\001\000\003\n\001\000\001\214\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001\215\f\n\001\000\b\n\001\000\003\n\001\000\001\n\001\216\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\001\n\001C\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\n\n\001`\003\n\001\000\b\n\001\000\003\n\001\000\002\n\001\217\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\f\n\001\220\001\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001!\013\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\b\n\001m\005\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\t\n\001m\004\n\001\000\b\n\001\000\003\n\001\000\002\n\001\221\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\004\n\001m\003\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\003\n\001!\004\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\003\n\001-\004\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\006\n\001\222\001\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\006\n\001\223\001\n\001\000\003\n\001\000\003\n\003\000\007\n\001\224\006\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001\225\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\005\n\001!\002\n\001\000\003\n\004{\001}\001~\034{\005\000\001~\035\000\003\n\003\000\r\n\001\226\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001\227\f\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001\230\t\n\001\000\b\n\001\000\003\n\001\000\002\n\001X\003\000\016\n\001\000\b\n\001\000\003\n\001\000\001!\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\001\231\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001\232\f\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001\233\013\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001\234\t\n\001\000\b\n\001\000\003\n\001\000\001\n\001;\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\t\n\001\225\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001\235\013\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\007\n\001y\006\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\003\n\001!\n\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\004\n\001-\003\n\001\000\003\n\001\000\003\n\003\000\004\n\001m\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\t\n\001\236\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\n\n\001m\003\n\001\000\b\n\001\000\003\n\001\000\001\n\001`\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\003\n\001\237\n\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\b\n\001`\005\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\006\n\001!\001\n\001\000\003\n\001\000\001\n\001\203\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\001X\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\003\n\001X\n\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\005\n\001\240\b\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\003\n\001\241\n\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001\242\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\003\n\001m\n\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\b\n\0010\005\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001\203\013\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001\243\f\n\001\000\b\n\001\000\003\n\001\000\001\n\001\244\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001C\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\005\n\001C\002\n\001\000\003\n\001\000\002\n\001c\003\000\n\n\001`\003\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\r\n\001h\001\000\b\n\001\000\003\n", offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do
                result[j++] = value;
            while(--count > 0);
        }

        return j;
    }

    private static int[] zzUnpackAttribute()
    {
        int result[] = new int[164];
        int offset = 0;
        offset = zzUnpackAttribute("\001\000\001\001\001\t\004\001\001\t\024\001\001\t*\001\001\000.\001\001\t\006\001\001\t&\001", offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int result[])
    {
        int i = 0;
        int j = offset;
        for(int l = packed.length(); i < l;)
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while(--count > 0);
        }

        return j;
    }

    public DOSBatchLexer()
    {
        zzLexicalState = 0;
        zzBuffer = new char[16384];
        zzAtBOL = true;
    }

    public int yychar()
    {
        return yychar;
    }

    public DOSBatchLexer(Reader in)
    {
        zzLexicalState = 0;
        zzBuffer = new char[16384];
        zzAtBOL = true;
        zzReader = in;
    }

    public DOSBatchLexer(InputStream in)
    {
        this(((Reader) (new InputStreamReader(in))));
    }

    private static char[] zzUnpackCMap(String packed)
    {
        char map[] = new char[0x10000];
        int i = 0;
        int j = 0;
        while(i < 1762) 
        {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do
                map[j++] = value;
            while(--count > 0);
        }
        return map;
    }

    private boolean zzRefill()
        throws IOException
    {
        if(zzStartRead > 0)
        {
            System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }
        if(zzCurrentPos >= zzBuffer.length)
        {
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }
        int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);
        if(numRead > 0)
        {
            zzEndRead += numRead;
            return false;
        }
        if(numRead == 0)
        {
            int c = zzReader.read();
            if(c == -1)
            {
                return true;
            } else
            {
                zzBuffer[zzEndRead++] = (char)c;
                return false;
            }
        } else
        {
            return true;
        }
    }

    public final void yyclose()
        throws IOException
    {
        zzAtEOF = true;
        zzEndRead = zzStartRead;
        if(zzReader != null)
            zzReader.close();
    }

    public final void yyreset(Reader reader)
    {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = 0;
    }

    public final int yystate()
    {
        return zzLexicalState;
    }

    public final void yybegin(int newState)
    {
        zzLexicalState = newState;
    }

    public final String yytext()
    {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    public final char yycharat(int pos)
    {
        return zzBuffer[zzStartRead + pos];
    }

    public final int yylength()
    {
        return zzMarkedPos - zzStartRead;
    }

    private void zzScanError(int errorCode)
    {
        String message;
        try
        {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch(ArrayIndexOutOfBoundsException e)
        {
            message = ZZ_ERROR_MSG[0];
        }
        throw new Error(message);
    }

    public void yypushback(int number)
    {
        if(number > yylength())
            zzScanError(2);
        zzMarkedPos -= number;
    }

    public Token yylex()
        throws IOException
    {
        int zzEndReadL = zzEndRead;
        char zzBufferL[] = zzBuffer;
        char zzCMapL[] = ZZ_CMAP;
        int zzTransL[] = ZZ_TRANS;
        int zzRowMapL[] = ZZ_ROWMAP;
        int zzAttrL[] = ZZ_ATTRIBUTE;
        do
        {
            int zzMarkedPosL = zzMarkedPos;
            yychar += zzMarkedPosL - zzStartRead;
            int zzAction = -1;
            int zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
            zzState = ZZ_LEXSTATE[zzLexicalState];
            int zzInput;
            int zzAttributes;
label0:
            do
            {
                do
                {
                    if(zzCurrentPosL < zzEndReadL)
                    {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    } else
                    {
                        if(zzAtEOF)
                        {
                            zzInput = -1;
                            break label0;
                        }
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if(eof)
                        {
                            zzInput = -1;
                            break label0;
                        }
                        zzInput = zzBufferL[zzCurrentPosL++];
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if(zzNext == -1)
                        break label0;
                    zzState = zzNext;
                    zzAttributes = zzAttrL[zzState];
                } while((zzAttributes & 1) != 1);
                zzAction = zzState;
                zzMarkedPosL = zzCurrentPosL;
            } while((zzAttributes & 8) != 8);
            zzMarkedPos = zzMarkedPosL;
            switch(zzAction >= 0 ? ZZ_ACTION[zzAction] : zzAction)
            {
            case 5: // '\005'
                yybegin(0);
                break;

            case 8: // '\b'
                return token(TokenType.STRING2);

            case 10: // '\n'
                yybegin(2);
                return token(TokenType.KEYWORD);

            case 4: // '\004'
                return token(TokenType.KEYWORD);

            case 7: // '\007'
                return token(TokenType.TYPE3);

            case 6: // '\006'
                return token(TokenType.KEYWORD2);

            case 3: // '\003'
                return token(TokenType.IDENTIFIER);

            case 1: // '\001'
                return token(TokenType.STRING);

            case 9: // '\t'
                return token(TokenType.COMMENT);

            default:
                if(zzInput == -1 && zzStartRead == zzCurrentPos)
                {
                    zzAtEOF = true;
                    return null;
                }
                zzScanError(1);
                break;

            case 2: // '\002'
            case 11: // '\013'
            case 12: // '\f'
            case 13: // '\r'
            case 14: // '\016'
            case 15: // '\017'
            case 16: // '\020'
            case 17: // '\021'
            case 18: // '\022'
            case 19: // '\023'
            case 20: // '\024'
                break;
            }
        } while(true);
    }

    public static final int YYEOF = -1;
    private static final int ZZ_BUFFERSIZE = 16384;
    public static final int ECHO_TEXT = 2;
    public static final int YYINITIAL = 0;
    private static final int ZZ_LEXSTATE[] = {
        0, 0, 1, 1
    };
    private static final String ZZ_CMAP_PACKED = "\t\027\001\000\001\005\002\000\001\004\016\027\b\000\001\026\001\025\n\000\n!\001\036\005\000\001\006\001\013\001\033\001\n\001\023\001\002\001\017\001\007\001\031\001\016\001\037\001\034\001\f\001\003\001\032\001\b\001\021\001\037\001\001\001\020\001\t\001\035\001\024\001\037\001\r\001\022\001\037\004\000\001 \001\000\001\013\001\033\001\n\001\023\001\002\001\017\001\007\001\031\001\016\001\037\001\034\001\f\001\003\001\032\001\b\001\021\001\037\001\001\001\020\001\t\001\035\001\024\001\037\001\r\001\022\001\037\004\000!\027\002\000\004\026\004\000\001\026\002\000\001\027\007\000\001\026\004\000\001\026\005\000\027\026\001\000\037\026\001\000\u013F\026\031\000r\026\004\000\f\026\016\000\005\026\t\000\001\026\021\000X\027\005\000\023\027\n\000\001\026\013\000\001\026\001\000\003\026\001\000\001\026\001\000\024\026\001\000,\026\001\000&\026\001\000\005\026\004\000\202\026\001\000\004\027\003\000E\026\001\000&\026\002\000\002\026\006\000\020\026!\000&\026\002\000\001\026\007\000'\026\t\000\021\027\001\000\027\027\001\000\003\027\001\000\001\027\001\000\002\027\001\000\001\027\013\000\033\026\005\000\003\026\r\000\004\027\f\000\006\027\013\000\032\026\005\000\013\026\016\027\007\000\n\030\004\000\002\026\001\027c\026\001\000\001\026\b\027\001\000\006\027\002\026\002\027\001\000\004\027\002\026\n\030\003\026\002\000\001\026\017\000\001\027\001\026\001\027\036\026\033\027\002\000\003\0260\000&\026\013\027\001\026\u014F\000\003\0276\026\002\000\001\027\001\026\020\027\002\000\001\026\004\027\003\000\n\026\002\027\002\000\n\030\021\000\003\027\001\000\b\026\002\000\002\026\002\000\026\026\001\000\007\026\001\000\001\026\003\000\004\026\002\000\001\027\001\026\007\027\002\000\002\027\002\000\003\027\t\000\001\027\004\000\002\026\001\000\003\026\002\027\002\000\n\030\004\026\r\000\003\027\001\000\006\026\004\000\002\026\002\000\026\026\001\000\007\026\001\000\002\026\001\000\002\026\001\000\002\026\002\000\001\027\001\000\005\027\004\000\002\027\002\000\003\027\013\000\004\026\001\000\001\026\007\000\n\030\002\027\003\026\f\000\003\027\001\000\t\026\001\000\003\026\001\000\026\026\001\000\007\026\001\000\002\026\001\000\005\026\002\000\001\027\001\026\b\027\001\000\003\027\001\000\003\027\002\000\001\026\017\000\002\026\002\027\002\000\n\030\001\000\001\026\017\000\003\027\001\000\b\026\002\000\002\026\002\000\026\026\001\000\007\026\001\000\002\026\001\000\005\026\002\000\001\027\001\026\006\027\003\000\002\027\002\000\003\027\b\000\002\027\004\000\002\026\001\000\003\026\004\000\n\030\001\000\001\026\020\000\001\027\001\026\001\000\006\026\003\000\003\026\001\000\004\026\003\000\002\026\001\000\001\026\001\000\002\026\003\000\002\026\003\000\003\026\003\000\b\026\001\000\003\026\004\000\005\027\003\000\003\027\001\000\004\027\t\000\001\027\017\000\t\030\t\000\001\026\007\000\003\027\001\000\b\026\001\000\003\026\001\000\027\026\001\000\n\026\001\000\005\026\004\000\007\027\001\000\003\027\001\000\004\027\007\000\002\027\t\000\002\026\004\000\n\030\022\000\002\027\001\000\b\026\001\000\003\026\001\000\027\026\001\000\n\026\001\000\005\026\002\000\001\027\001\026\007\027\001\000\003\027\001\000\004\027\007\000\002\027\007\000\001\026\001\000\002\026\004\000\n\030\022\000\002\027\001\000\b\026\001\000\003\026\001\000\027\026\001\000\020\026\004\000\006\027\002\000\003\027\001\000\004\027\t\000\001\027\b\000\002\026\004\000\n\030\022\000\002\027\001\000\022\026\003\000\030\026\001\000\t\026\001\000\001\026\002\000\007\026\003\000\001\027\004\000\006\027\001\000\001\027\001\000\b\027\022\000\002\027\r\0000\026\001\027\002\026\007\027\004\000\b\026\b\027\001\000\n\030'\000\002\026\001\000\001\026\002\000\002\026\001\000\001\026\002\000\001\026\006\000\004\026\001\000\007\026\001\000\003\026\001\000\001\026\001\000\001\026\002\000\002\026\001\000\004\026\001\027\002\026\006\027\001\000\002\027\001\026\002\000\005\026\001\000\001\026\001\000\006\027\002\000\n\030\002\000\002\026\"\000\001\026\027\000\002\027\006\000\n\030\013\000\001\027\001\000\001\027\001\000\001\027\004\000\002\027\b\026\001\000\"\026\006\000\024\027\001\000\002\027\004\026\004\000\b\027\001\000$\027\t\000\001\0279\000\"\026\001\000\005\026\001\000\002\026\001\000\007\027\003\000\004\027\006\000\n\030\006\000\006\026\004\027F\000&\026\n\000)\026\007\000Z\026\005\000D\026\005\000R\026\006\000\007\026\001\000?\026\001\000\001\026\001\000\004\026\002\000\007\026\001\000\001\026\001\000\004\026\002\000'\026\001\000\001\026\001\000\004\026\002\000\037\026\001\000\001\026\001\000\004\026\002\000\007\026\001\000\001\026\001\000\004\026\002\000\007\026\001\000\007\026\001\000\027\026\001\000\037\026\001\000\001\026\001\000\004\026\002\000\007\026\001\000'\026\001\000\023\026\016\000\t\030.\000U\026\f\000\u026C\026\002\000\b\026\n\000\032\026\005\000K\026\003\000\003\026\017\000\r\026\001\000\004\026\003\027\013\000\022\026\003\027\013\000\022\026\002\027\f\000\r\026\001\000\003\026\001\000\002\027\f\0004\026 \027\003\000\001\026\003\000\002\026\001\027\002\000\n\030!\000\003\027\002\000\n\030\006\000X\026\b\000)\026\001\027V\000\035\026\003\000\f\027\004\000\f\027\n\000\n\030\036\026\002\000\005\026\u038B\000l\026\224\000\234\026\004\000Z\026\006\000\026\026\002\000\006\026\002\000&\026\002\000\006\026\002\000\b\026\001\000\001\026\001\000\001\026\001\000\001\026\001\000\037\026\002\0005\026\001\000\007\026\001\000\001\026\003\000\003\026\001\000\007\026\003\000\004\026\002\000\006\026\004\000\r\026\005\000\003\026\001\000\007\026\017\000\004\027\032\000\005\027\020\000\002\026\023\000\001\026\013\000\004\027\006\000\006\027\001\000\001\026\r\000\001\026 \000\022\026\036\000\r\027\004\000\001\027\003\000\006\027\027\000\001\026\004\000\001\026\002\000\n\026\001\000\001\026\003\000\005\026\006\000\001\026\001\000\001\026\001\000\001\026\001\000\004\026\001\000\003\026\001\000\007\026\003\000\003\026\005\000\005\026\026\000$\026\u0E81\000\003\026\031\000\t\026\006\027\001\000\005\026\002\000\005\026\004\000V\026\002\000\002\027\002\000\003\026\001\000_\026\005\000(\026\004\000^\026\021\000\030\0268\000\020\026\u0200\000\u19B6\026J\000\u51A6\026Z\000\u048D\026\u0773\000\u2BA4\026\u215C\000\u012E\026\002\000;\026\225\000\007\026\f\000\005\026\005\000\001\026\001\027\n\026\001\000\r\026\001\000\005\026\001\000\001\026\001\000\002\026\001\000\002\026\001\000l\026!\000\u016B\026\022\000@\026\002\0006\026(\000\r\026\003\000\020\027\020\000\004\027\017\000\002\026\030\000\003\026\031\000\001\026\006\000\005\026\001\000\207\026\002\000\001\027\004\000\001\026\013\000\n\030\007\000\032\026\004\000\001\026\001\000\032\026\n\000Z\026\003\000\006\026\002\000\006\026\002\000\006\026\002\000\003\026\003\000\002\026\003\000\002\026\022\000\003\027\004\0";
    private static final char ZZ_CMAP[] = zzUnpackCMap("\t\027\001\000\001\005\002\000\001\004\016\027\b\000\001\026\001\025\n\000\n!\001\036\005\000\001\006\001\013\001\033\001\n\001\023\001\002\001\017\001\007\001\031\001\016\001\037\001\034\001\f\001\003\001\032\001\b\001\021\001\037\001\001\001\020\001\t\001\035\001\024\001\037\001\r\001\022\001\037\004\000\001 \001\000\001\013\001\033\001\n\001\023\001\002\001\017\001\007\001\031\001\016\001\037\001\034\001\f\001\003\001\032\001\b\001\021\001\037\001\001\001\020\001\t\001\035\001\024\001\037\001\r\001\022\001\037\004\000!\027\002\000\004\026\004\000\001\026\002\000\001\027\007\000\001\026\004\000\001\026\005\000\027\026\001\000\037\026\001\000\u013F\026\031\000r\026\004\000\f\026\016\000\005\026\t\000\001\026\021\000X\027\005\000\023\027\n\000\001\026\013\000\001\026\001\000\003\026\001\000\001\026\001\000\024\026\001\000,\026\001\000&\026\001\000\005\026\004\000\202\026\001\000\004\027\003\000E\026\001\000&\026\002\000\002\026\006\000\020\026!\000&\026\002\000\001\026\007\000'\026\t\000\021\027\001\000\027\027\001\000\003\027\001\000\001\027\001\000\002\027\001\000\001\027\013\000\033\026\005\000\003\026\r\000\004\027\f\000\006\027\013\000\032\026\005\000\013\026\016\027\007\000\n\030\004\000\002\026\001\027c\026\001\000\001\026\b\027\001\000\006\027\002\026\002\027\001\000\004\027\002\026\n\030\003\026\002\000\001\026\017\000\001\027\001\026\001\027\036\026\033\027\002\000\003\0260\000&\026\013\027\001\026\u014F\000\003\0276\026\002\000\001\027\001\026\020\027\002\000\001\026\004\027\003\000\n\026\002\027\002\000\n\030\021\000\003\027\001\000\b\026\002\000\002\026\002\000\026\026\001\000\007\026\001\000\001\026\003\000\004\026\002\000\001\027\001\026\007\027\002\000\002\027\002\000\003\027\t\000\001\027\004\000\002\026\001\000\003\026\002\027\002\000\n\030\004\026\r\000\003\027\001\000\006\026\004\000\002\026\002\000\026\026\001\000\007\026\001\000\002\026\001\000\002\026\001\000\002\026\002\000\001\027\001\000\005\027\004\000\002\027\002\000\003\027\013\000\004\026\001\000\001\026\007\000\n\030\002\027\003\026\f\000\003\027\001\000\t\026\001\000\003\026\001\000\026\026\001\000\007\026\001\000\002\026\001\000\005\026\002\000\001\027\001\026\b\027\001\000\003\027\001\000\003\027\002\000\001\026\017\000\002\026\002\027\002\000\n\030\001\000\001\026\017\000\003\027\001\000\b\026\002\000\002\026\002\000\026\026\001\000\007\026\001\000\002\026\001\000\005\026\002\000\001\027\001\026\006\027\003\000\002\027\002\000\003\027\b\000\002\027\004\000\002\026\001\000\003\026\004\000\n\030\001\000\001\026\020\000\001\027\001\026\001\000\006\026\003\000\003\026\001\000\004\026\003\000\002\026\001\000\001\026\001\000\002\026\003\000\002\026\003\000\003\026\003\000\b\026\001\000\003\026\004\000\005\027\003\000\003\027\001\000\004\027\t\000\001\027\017\000\t\030\t\000\001\026\007\000\003\027\001\000\b\026\001\000\003\026\001\000\027\026\001\000\n\026\001\000\005\026\004\000\007\027\001\000\003\027\001\000\004\027\007\000\002\027\t\000\002\026\004\000\n\030\022\000\002\027\001\000\b\026\001\000\003\026\001\000\027\026\001\000\n\026\001\000\005\026\002\000\001\027\001\026\007\027\001\000\003\027\001\000\004\027\007\000\002\027\007\000\001\026\001\000\002\026\004\000\n\030\022\000\002\027\001\000\b\026\001\000\003\026\001\000\027\026\001\000\020\026\004\000\006\027\002\000\003\027\001\000\004\027\t\000\001\027\b\000\002\026\004\000\n\030\022\000\002\027\001\000\022\026\003\000\030\026\001\000\t\026\001\000\001\026\002\000\007\026\003\000\001\027\004\000\006\027\001\000\001\027\001\000\b\027\022\000\002\027\r\0000\026\001\027\002\026\007\027\004\000\b\026\b\027\001\000\n\030'\000\002\026\001\000\001\026\002\000\002\026\001\000\001\026\002\000\001\026\006\000\004\026\001\000\007\026\001\000\003\026\001\000\001\026\001\000\001\026\002\000\002\026\001\000\004\026\001\027\002\026\006\027\001\000\002\027\001\026\002\000\005\026\001\000\001\026\001\000\006\027\002\000\n\030\002\000\002\026\"\000\001\026\027\000\002\027\006\000\n\030\013\000\001\027\001\000\001\027\001\000\001\027\004\000\002\027\b\026\001\000\"\026\006\000\024\027\001\000\002\027\004\026\004\000\b\027\001\000$\027\t\000\001\0279\000\"\026\001\000\005\026\001\000\002\026\001\000\007\027\003\000\004\027\006\000\n\030\006\000\006\026\004\027F\000&\026\n\000)\026\007\000Z\026\005\000D\026\005\000R\026\006\000\007\026\001\000?\026\001\000\001\026\001\000\004\026\002\000\007\026\001\000\001\026\001\000\004\026\002\000'\026\001\000\001\026\001\000\004\026\002\000\037\026\001\000\001\026\001\000\004\026\002\000\007\026\001\000\001\026\001\000\004\026\002\000\007\026\001\000\007\026\001\000\027\026\001\000\037\026\001\000\001\026\001\000\004\026\002\000\007\026\001\000'\026\001\000\023\026\016\000\t\030.\000U\026\f\000\u026C\026\002\000\b\026\n\000\032\026\005\000K\026\003\000\003\026\017\000\r\026\001\000\004\026\003\027\013\000\022\026\003\027\013\000\022\026\002\027\f\000\r\026\001\000\003\026\001\000\002\027\f\0004\026 \027\003\000\001\026\003\000\002\026\001\027\002\000\n\030!\000\003\027\002\000\n\030\006\000X\026\b\000)\026\001\027V\000\035\026\003\000\f\027\004\000\f\027\n\000\n\030\036\026\002\000\005\026\u038B\000l\026\224\000\234\026\004\000Z\026\006\000\026\026\002\000\006\026\002\000&\026\002\000\006\026\002\000\b\026\001\000\001\026\001\000\001\026\001\000\001\026\001\000\037\026\002\0005\026\001\000\007\026\001\000\001\026\003\000\003\026\001\000\007\026\003\000\004\026\002\000\006\026\004\000\r\026\005\000\003\026\001\000\007\026\017\000\004\027\032\000\005\027\020\000\002\026\023\000\001\026\013\000\004\027\006\000\006\027\001\000\001\026\r\000\001\026 \000\022\026\036\000\r\027\004\000\001\027\003\000\006\027\027\000\001\026\004\000\001\026\002\000\n\026\001\000\001\026\003\000\005\026\006\000\001\026\001\000\001\026\001\000\001\026\001\000\004\026\001\000\003\026\001\000\007\026\003\000\003\026\005\000\005\026\026\000$\026\u0E81\000\003\026\031\000\t\026\006\027\001\000\005\026\002\000\005\026\004\000V\026\002\000\002\027\002\000\003\026\001\000_\026\005\000(\026\004\000^\026\021\000\030\0268\000\020\026\u0200\000\u19B6\026J\000\u51A6\026Z\000\u048D\026\u0773\000\u2BA4\026\u215C\000\u012E\026\002\000;\026\225\000\007\026\f\000\005\026\005\000\001\026\001\027\n\026\001\000\r\026\001\000\005\026\001\000\001\026\001\000\002\026\001\000\002\026\001\000l\026!\000\u016B\026\022\000@\026\002\0006\026(\000\r\026\003\000\020\027\020\000\004\027\017\000\002\026\030\000\003\026\031\000\001\026\006\000\005\026\001\000\207\026\002\000\001\027\004\000\001\026\013\000\n\030\007\000\032\026\004\000\001\026\001\000\032\026\n\000Z\026\003\000\006\026\002\000\006\026\002\000\006\026\002\000\003\026\003\000\002\026\003\000\002\026\022\000\003\027\004\0");
    private static final int ZZ_ACTION[] = zzUnpackAction();
    private static final String ZZ_ACTION_PACKED_0 = "\001\000\001\001\001\002\003\003\001\002\001\004\r\003\001\002\003\003\001\002\002\001\001\005\001\001\002\003\001\004\020\003\001\004\025\003\001\000\001\006\003\003\001\007\001\001\001\006\001\004\003\003\001\004\025\003\001\004\001\003\001\004\t\003\001\004\001\b\002\003\001\b\001\t\001\003\002\t\006\003\001\n\002\003\001\004\007\003\001\004\024\003";
    private static final int ZZ_ROWMAP[] = zzUnpackRowMap();
    private static final String ZZ_ROWMAP_PACKED_0 = "\000\000\000\"\000D\000f\000\210\000\252\000\314\000D\000\356\000\u0110\000\u0132\000\u0154\000\u0176\000\u0198\000\u01BA\000\u01DC\000\u01FE\000\u0220\000\u0242\000\u0264\000\u0286\000\u02A8\000\u02CA\000\u02EC\000\u030E\000\u0330\000\u0352\000\u0374\000D\000\u0396\000\u03B8\000\u03DA\000\u0110\000\u03FC\000\u041E\000\u0440\000\u0462\000\u0484\000\u04A6\000\u04C8\000\u04EA\000\u050C\000\u052E\000\u0550\000\u0572\000\u0594\000\u05B6\000\u05D8\000\u05FA\000\u061C\000\u063E\000\u0660\000\u0682\000\u06A4\000\u06C6\000\u06E8\000\u070A\000\u072C\000\u074E\000\u0770\000\u0792\000\u07B4\000\u07D6\000\u07F8\000\u081A\000\u083C\000\u085E\000\u0880\000\u08A2\000\u08C4\000\u08E6\000\u0908\000\u092A\000\u094C\000\u096E\000\u0990\000\u09B2\000\u09D4\000\u09F6\000\u0A18\000\u0A3A\000\u0A5C\000\u0A7E\000\u0AA0\000\u0AC2\000\u0AE4\000\u0B06\000\u0B28\000\u0B4A\000\u0B6C\000\u0B8E\000\u0BB0\000\u0BD2\000\u0BF4\000\u0C16\000\u0C38\000\u0C5A\000\u0C7C\000\u0C9E\000\u0CC0\000\u0CE2\000\u0D04\000\u0D26\000\u0D48\000\u0D6A\000\u0D8C\000\u0DAE\000\u0B6C\000\u0DD0\000\u0DF2\000\u0E14\000\u0E36\000\u0E58\000\u0E7A\000\u0E9C\000\u0EBE\000\u0EE0\000\u0F02\000D\000\u0F24\000\u0F46\000\u0352\000\u0F68\000\u0A18\000\u0F8A\000D\000\u0FAC\000\u0FCE\000\u0FF0\000\u1012\000\u1034\000\u1056\000\u0110\000\u1078\000\u109A\000\u10BC\000\u10DE\000\u1100\000\u1122\000\u1144\000\u1166\000\u1188\000\u11AA\000\u11CC\000\u11EE\000\u1210\000\u1232\000\u1254\000\u1276\000\u1298\000\u12BA\000\u12DC\000\u12FE\000\u1320\000\u1342\000\u1364\000\u1386\000\u13A8\000\u13CA\000\u13EC\000\u140E\000\u1430\000\u1452\000\u1474";
    private static final int ZZ_TRANS[] = zzUnpackTrans();
    private static final String ZZ_TRANS_PACKED_0 = "\001\003\001\004\001\005\001\006\001\007\001\003\001\b\001\t\001\n\001\013\001\f\001\r\001\016\001\017\001\020\001\021\001\022\001\023\001\n\001\024\001\025\001\026\003\n\001\027\001\n\001\030\001\031\001\n\001\032\003\n\004\033\001\034\001\035\017\033\001\036\f\033#\000\001\n\001\037\001 \003\000\f\n\001!\001\n\001\000\b\n\001\000\003\n\001\000\001\"\002\n\003\000\003\n\001#\001\n\001$\001%\007\n\001\000\004\n\001&\003\n\001\000\003\n\001\000\003\n\003\000\001\n\001'\n\n\001!\001\n\001\000\006\n\001 \001\n\001\000\003\n\005\000\001\003\035\000\001(\002\n\003\000\001\n\001)\f\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\001*\002\n\003\000\007\n\001+\003\n\001,\002\n\001\000\b\n\001\000\003\n\001\000\002\n\001-\003\000\001\n\001.\002\n\001/\0010\006\n\001!\001\n\001\000\003\n\0011\004\n\001\000\003\n\001\000\003\n\003\000\002\n\0012\006\n\0013\0014\003\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\0015\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\003\n\0016\n\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\b\n\001!\005\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\0017\0018\001!\003\n\0019\006\n\001\000\b\n\001\000\003\n\001\000\001\n\001:\001\n\003\000\001\n\001;\001<\013\n\001\000\003\n\001=\003\n\001>\001\000\003\n\001\000\001?\002\n\003\000\001\n\001@\002\n\001A\t\n\001\000\007\n\001B\001\000\003\n\001\000\001\n\001C\001\n\003\000\001\n\001D\002\n\001E\002\n\001F\006\n\001\000\b\n\001\000\003\n\001\000\001\n\001G\001\n\003\000\001\n\001C\f\n\001\000\b\n\001\000\003\n\001\000\003H\003\000\016H\001\000\001H\001\000\001I\005H\001\000\002H\001I\001\000\001\n\001J\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\001K\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\001\n\001L\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003M\003\000\016M\004\000\005M\001\000\001M\002\000\005\033\001\000!\033\001\035\035\033\003N\001\033\001\000\001\033\016N\001\033\001N\001\033\001O\005N\001\033\002N\001O\001\000\002\n\001P\003\000\003\n\001Q\005\n\001R\001S\003\n\001\000\004\n\001T\003\n\001\000\003\n\001\000\003\n\003\000\f\n\001U\001\n\001\000\b\n\001\000\003\n\001\000\001V\002\n\003\000\004\n\001$\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\003\n\001W\004\n\001\000\003\n\001\000\003\n\003\000\t\n\001X\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\007\n\001Y\006\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\f\n\001Z\001\n\001\000\b\n\001\000\003\n\001\000\001X\002\n\003\000\f\n\002X\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001[\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001\\\013\n\001\000\b\n\001\000\003\n\001\000\001\n\001X\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\002\n\001X\003\000\002\n\001]\013\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\n\n\001X\003\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\f\n\001!\001\n\001\000\b\n\001\000\003\n\001\000\002\n\001^\003\000\005\n\001_\004\n\001`\003\n\001\000\004\n\001a\003\n\001\000\003\n\001\000\003\n\003\000\003\n\001b\001\n\001C\b\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\t\n\001!\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\003\n\001c\b\n\001U\001\n\001\000\006\n\001d\001\n\001\000\003\n\001\000\003\n\003\000\002\n\001e\013\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\t\n\001f\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\n\n\001g\003\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\005\n\001h\002\n\001\000\003\n\001\000\003\n\003\000\001\n\001i\f\n\001\000\b\n\001\000\003\n\001\000\001j\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\013\n\001,\002\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\004\n\001k\003\n\001\000\003\n\001\000\003\n\003\000\002\n\001l\013\n\001\000\b\n\001\000\003\n\001\000\001m\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001;\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\007\n\001n\006\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\005\n\001o\002\n\001\000\003\n\001\000\003\n\003\000\001\n\001p\005\n\001q\006\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\n\n\001-\003\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001r\013\n\001\000\007\n\001$\001\000\003\n\001\000\003\n\003\000\t\n\001s\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\005\n\001!\b\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\t\n\001t\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001X\013\n\001\000\b\n\001\000\003\n\001\000\001!\002\n\003\000\t\n\001u\004\n\001\000\b\n\001\000\003\n\001\000\001v\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003H\003\000\016H\001w\bH\001\000\003H\030\000\001I\b\000\001I\001\000\003\n\003\000\005\n\001c\b\n\001\000\b\n\001\000\003\n\001\000\001\n\001x\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\013\n\001y\002\n\001\000\b\n\001\000\003\n\001\000\003M\003\000\016M\004\000\005M\001\000\003M\001\033\003N\001\033\001\000\001\033\016N\001z\bN\001\033\003N\005\033\001\000\022\033\001O\b\033\001O\001{\003|\001}\001~\001{\016|\001{\b|\001{\003|\001\000\003\n\003\000\001\n\001\177\f\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001\200\013\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\005\n\001\201\b\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001\202\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\007\n\001\203\006\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001\204\f\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001\205\f\n\001\000\b\n\001\000\003\n\001\000\001\n\001!\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001!\006\n\001m\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\005\n\001\206\b\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\b\n\001\207\005\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001!\f\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\005\n\001X\b\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\n\n\001\210\003\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001\203\f\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\013\n\001!\002\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\r\n\001\211\001\000\b\n\001\000\003\n\001\000\003\n\003\000\005\n\0010\b\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\n\n\001!\003\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\f\n\001\212\001\n\001\000\004\n\001\213\003\n\001\000\003\n\001\000\001\214\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001\215\f\n\001\000\b\n\001\000\003\n\001\000\001\n\001\216\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\001\n\001C\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\n\n\001`\003\n\001\000\b\n\001\000\003\n\001\000\002\n\001\217\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\f\n\001\220\001\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001!\013\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\b\n\001m\005\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\t\n\001m\004\n\001\000\b\n\001\000\003\n\001\000\002\n\001\221\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\004\n\001m\003\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\003\n\001!\004\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\003\n\001-\004\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\006\n\001\222\001\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\006\n\001\223\001\n\001\000\003\n\001\000\003\n\003\000\007\n\001\224\006\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001\225\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\005\n\001!\002\n\001\000\003\n\004{\001}\001~\034{\005\000\001~\035\000\003\n\003\000\r\n\001\226\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001\227\f\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001\230\t\n\001\000\b\n\001\000\003\n\001\000\002\n\001X\003\000\016\n\001\000\b\n\001\000\003\n\001\000\001!\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\001\231\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001\232\f\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001\233\013\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001\234\t\n\001\000\b\n\001\000\003\n\001\000\001\n\001;\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\t\n\001\225\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001\235\013\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\007\n\001y\006\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\003\n\001!\n\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\004\n\001-\003\n\001\000\003\n\001\000\003\n\003\000\004\n\001m\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\t\n\001\236\004\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\n\n\001m\003\n\001\000\b\n\001\000\003\n\001\000\001\n\001`\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\003\n\001\237\n\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\b\n\001`\005\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\006\n\001!\001\n\001\000\003\n\001\000\001\n\001\203\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\001X\002\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\003\n\001X\n\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\005\n\001\240\b\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\003\n\001\241\n\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001\242\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\003\n\001m\n\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\b\n\0010\005\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\002\n\001\203\013\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\001\n\001\243\f\n\001\000\b\n\001\000\003\n\001\000\001\n\001\244\001\n\003\000\016\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\004\n\001C\t\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\016\n\001\000\005\n\001C\002\n\001\000\003\n\001\000\002\n\001c\003\000\n\n\001`\003\n\001\000\b\n\001\000\003\n\001\000\003\n\003\000\r\n\001h\001\000\b\n\001\000\003\n";
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final String ZZ_ERROR_MSG[] = {
        "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large"
    };
    private static final int ZZ_ATTRIBUTE[] = zzUnpackAttribute();
    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\001\000\001\001\001\t\004\001\001\t\024\001\001\t*\001\001\000.\001\001\t\006\001\001\t&\001";
    private Reader zzReader;
    private int zzState;
    private int zzLexicalState;
    private char zzBuffer[];
    private int zzMarkedPos;
    private int zzCurrentPos;
    private int zzStartRead;
    private int zzEndRead;
    private int yyline;
    private int yychar;
    private int yycolumn;
    private boolean zzAtBOL;
    private boolean zzAtEOF;
    private boolean zzEOFDone;

}
