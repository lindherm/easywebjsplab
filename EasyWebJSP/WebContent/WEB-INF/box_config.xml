<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"  xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
		   " default-autowire="no" default-lazy-init="false">
		   
	<!-- 导入数据源配置 -->
	<import resource="classpath:datasource.xml" />
	<!-- 导入UI基本配置文件 -->
	<!--import resource="box_ui.xml" /-->
	<!-- 导入模块配置 -->
	<import resource="classpath:module_config/**/*.xml" />
	<!-- 导入XFire基本配置文件 -->
	<!--import resource="classpath:org/codehaus/xfire/spring/xfire.xml" /-->
	<!-- 项目特定配置文件集合 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:*.properties</value>
			</list>
		</property>
	</bean>
	<!-- Hibernate配置域 -->
	<bean id="autoHbmLoader" class="net.box.hibernate.AutoHbmLoader">
		<property name="hbmClassPath">
			<value>classpath:${project.rootpackage}/**/*.hbm.xml</value>
		</property>
	</bean>
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" depends-on="autoHbmLoader">
		<property name="dataSource" ref="fmkdataSource" />
		<property name="mappingLocations" ref="autoHbmLoader" />
		<property name="lobHandler" ref="lobHandler" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${project.hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${project.hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${project.hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">${project.hibernate.format_sql}</prop>
				<prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<prop key="hibernate.use_outer_join">false</prop>
				<prop key="hibernate.jdbc.batch_size">0</prop>
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<prop key="hibernate.jdbc.use_streams_for_binary">true</prop>
			</props>
		</property>
		<!-- 
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		 -->
		<property name="schemaUpdate" value="${project.hibernate.schemaUpdate}" />
	</bean>
	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transaction" />
		<property name="transactionAttributes">
			<props>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="search*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	<bean id="autoProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="proxyTargetClass" value="true" />
		<property name="beanNames">
			<value>*Dao,*Manager</value>
		</property>
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	<bean class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
		<property name="transactionInterceptor" ref="transactionInterceptor" />
	</bean>
</beans>
